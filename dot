#!/usr/bin/env bash
# Dotfiles management script
# Compatible with bash 3.2+ (including macOS default bash)
#
# Bash 3.2 Compatibility Notes:
# - Uses functions instead of associative arrays (bash 4+ feature)
# - Uses while-read loops instead of mapfile (bash 4+ feature)
# - Avoids process substitution where possible for portability
# - All array operations use bash 3.2 compatible syntax

# Verify bash version
if [[ "${BASH_VERSINFO[0]}" -lt 3 || ( "${BASH_VERSINFO[0]}" -eq 3 && "${BASH_VERSINFO[1]}" -lt 2 ) ]]; then
    echo "Error: This script requires bash 3.2 or later"
    echo "Current version: $BASH_VERSION"
    exit 1
fi

# Safer glob handling
shopt -s nullglob      # Empty expansion for non-matching globs
shopt -s extglob       # Extended pattern matching

# Note: Not using 'set -e' for better error handling control
# Errors are explicitly checked and handled with context

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Status symbols
SYMBOL_SUCCESS='✓'
SYMBOL_ERROR='✗'
SYMBOL_WARNING='⚠'
SYMBOL_INFO='∙'

# Configuration
DOTFILES_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
readonly PACKAGES_DIR="$DOTFILES_DIR/packages"

# Backup retention policy (configurable via environment variables)
readonly MAX_BACKUPS_TO_DISPLAY="${DOTFILES_MAX_BACKUPS_TO_DISPLAY:-5}"     # Status output
readonly MAX_BACKUPS_TO_KEEP="${DOTFILES_MAX_BACKUPS_TO_KEEP:-10}"          # Auto cleanup threshold

# Display limits
readonly RESTORE_DISPLAY_LIMIT="${DOTFILES_RESTORE_DISPLAY_LIMIT:-20}"      # Restore preview

# Timeout values in seconds
readonly GIT_TIMEOUT="${DOTFILES_GIT_TIMEOUT:-60}"                           # Git operations
readonly CURL_TIMEOUT="${DOTFILES_CURL_TIMEOUT:-30}"                         # Curl downloads

# Security
readonly SECRET_FILE_MODE="${DOTFILES_SECRET_FILE_MODE:-600}"                # Secret file permissions

# Output formatting
readonly OUTPUT_PREFIX="${DOTFILES_OUTPUT_PREFIX:-│ }"                       # Indentation character

# Backup paths
readonly BACKUP_DIR_PREFIX="${DOTFILES_BACKUP_DIR_PREFIX:-backups/dotfiles-backup}"
readonly RESTORE_SAFETY_PREFIX="${DOTFILES_RESTORE_SAFETY_PREFIX:-backups/dotfiles-pre-restore}"
BACKUP_DIR="$DOTFILES_DIR/${BACKUP_DIR_PREFIX}-$(date +%s)"

# Unit conversion constants
readonly SECONDS_PER_DAY=86400
readonly KB_TO_MB=1024

# Track installation state for rollback
INSTALLED_PACKAGES=()
INSTALLATION_IN_PROGRESS=false
ROLLBACK_STACK=()

# Add action to rollback stack
add_rollback() {
    local action="$1"
    ROLLBACK_STACK+=("$action")
}

# Execute rollback in reverse order
execute_rollback() {
    if [[ ${#ROLLBACK_STACK[@]} -eq 0 ]]; then
        log_info "Nothing to rollback"
        return 0
    fi

    log_warning "Rolling back installation..."

    # Execute in reverse order (LIFO)
    for ((i=${#ROLLBACK_STACK[@]}-1; i>=0; i--)); do
        log_info "Rollback step: ${ROLLBACK_STACK[i]}"
        eval "${ROLLBACK_STACK[i]}" 2>/dev/null || log_warning "Rollback step failed (non-critical)"
    done

    log_success "Rollback completed"
    return 0
}

# Cleanup handler
cleanup_on_exit() {
    local exit_code=$?

    # Only run cleanup if installation was in progress and failed
    if [[ $INSTALLATION_IN_PROGRESS == true ]] && [[ $exit_code -ne 0 ]]; then
        echo ""
        log_error "Installation interrupted or failed (exit code: $exit_code)"

        if [[ ${#ROLLBACK_STACK[@]} -gt 0 ]]; then
            echo ""
            read -p "Rollback installation? (Y/n): " -n 1 -r
            echo ""

            if [[ $REPLY =~ ^[Yy]$ ]] || [[ -z $REPLY ]]; then
                execute_rollback
            else
                log_info "Skipping rollback"
                if [[ ${#INSTALLED_PACKAGES[@]} -gt 0 ]]; then
                    log_warning "Partial installation: ${INSTALLED_PACKAGES[*]}"
                    log_info "Run './dot uninstall' to remove manually"
                fi
            fi
        fi
    fi
}

# Interrupt handler
handle_interrupt() {
    echo ""
    log_warning "Installation interrupted by user"
    exit 130
}

# Set up traps
trap cleanup_on_exit EXIT
trap handle_interrupt INT TERM

# Package definitions
# Note: system package is stowed first to ensure .stow-global-ignore is in place
PACKAGES=("system" "git" "zsh" "tmux" "gh" "gnuplot" "bash" "fish")

# Get package files (bash 3.2 compatible - no associative arrays)
get_package_files() {
    local package="$1"
    case "$package" in
        system)  echo ".stow-global-ignore,.stowrc,.editorconfig,.inputrc" ;;
        git)     echo ".gitconfig,.gitattributes,.gitignore-globals" ;;
        zsh)     echo ".zshrc,.zprofile,.oh-my-zsh" ;;
        tmux)    echo ".tmux.conf" ;;
        gh)      echo ".config/gh" ;;
        gnuplot) echo ".gnuplot" ;;
        bash)    echo ".bashrc,.bash_profile" ;;
        fish)    echo ".config/fish" ;;
        *)       echo "" ;;
    esac
}

# Get package display name (bash 3.2 compatible - no associative arrays)
get_package_name() {
    local package="$1"
    case "$package" in
        system)  echo "System" ;;
        git)     echo "Git" ;;
        zsh)     echo "Zsh" ;;
        tmux)    echo "Tmux" ;;
        gh)      echo "GitHub CLI" ;;
        gnuplot) echo "GNU Plot" ;;
        bash)    echo "Bash" ;;
        fish)    echo "Fish" ;;
        *)       echo "$package" ;;
    esac
}

# Get required dependencies (bash 3.2 compatible - no associative arrays)
get_required_deps() {
    local type="$1"
    case "$type" in
        common)   echo "stow git" ;;
        optional) echo "tmux zsh fish" ;;
        *)        echo "" ;;
    esac
}

# Auto-discovery functions for templates and secret configs
# Convention: *.template files are processed to create target files
# Convention: *.secret files are merged with targets based on file type

# Discover all template files and output template:target pairs
discover_templates() {
    find "$PACKAGES_DIR" -type f -name "*.template" 2>/dev/null | while read -r template; do
        local target="${template%.template}"
        local package_dir
        package_dir=$(dirname "$template")
        local rel_path="${target#"$package_dir"/}"

        echo "$template:$rel_path"
    done | sort
}

# Discover all secret config files
discover_secret_configs() {
    find "$PACKAGES_DIR" -type f -name "*.secret" 2>/dev/null | sort
}

# Logging functions
log_info() {
    echo -e "${BLUE}${SYMBOL_INFO}${NC} $1"
}

log_success() {
    echo -e "${GREEN}${SYMBOL_SUCCESS}${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}${SYMBOL_WARNING}${NC} $1" >&2
}

log_error() {
    echo -e "${RED}${SYMBOL_ERROR}${NC} $1" >&2
}

# Prefix subcommand output for clarity with smart colorization
# Colors lines based on content patterns (errors, warnings, info)
prefix_output() {
    local prefix="${1:-$OUTPUT_PREFIX}"
    while IFS= read -r line; do
        # Skip harmless stow BUG warnings about absolute path mismatches
        if [[ "$line" =~ "BUG in find_stowed_path? Absolute/relative mismatch" ]]; then
            continue
        fi

        # Pattern matching for line classification
        if [[ "$line" =~ ^[[:space:]]*(ERROR|error|Error|FAIL|fail|failed|Failed|cannot|Cannot|unable|Unable|fatal|Fatal|FATAL) ]] || \
           [[ "$line" =~ (error:|failed:|fatal:) ]]; then
            # Error patterns - red
            echo -e "${RED}${prefix}${line}${NC}"
        elif [[ "$line" =~ ^[[:space:]]*(WARN|warn|Warn|WARNING|warning|Warning|BUG) ]] || \
             [[ "$line" =~ (warning:|warn:) ]]; then
            # Warning patterns - yellow
            echo -e "${YELLOW}${prefix}${line}${NC}"
        elif [[ "$line" =~ ^[[:space:]]*(SUCCESS|success|Success|OK|ok|Ok|DONE|done|Done|✓|✔) ]] || \
             [[ "$line" =~ (success:|complete:|completed:) ]]; then
            # Success patterns - green
            echo -e "${GREEN}${prefix}${line}${NC}"
        else
            # Info/normal output - blue (subtle)
            echo -e "${BLUE}${prefix}${NC}${line}"
        fi
    done
}

# Show usage information
show_usage() {
    echo "Usage: $0 COMMAND [OPTIONS]"
    echo ""
    echo "Commands:"
    echo "  install       Install dotfiles using GNU Stow"
    echo "  status        Show installation status and recent backups"
    echo "  health        Run comprehensive diagnostics"
    echo "  update        Update configurations and reinstall"
    echo "  diff          Preview changes before applying"
    echo "  uninstall     Remove dotfiles symlinks"
    echo "  backup        Create backup of existing files"
    echo "  backups       List all available backups with details"
    echo "  restore       Restore from backup (default: latest)"
    echo "  clean         Clean up backup directories"
    echo "  enable        Enable a specific package"
    echo "  disable       Disable a specific package"
    echo "  packages      List all packages and their status"
    echo "  security      Run security audit on dotfiles"
    echo ""
    echo "Options:"
    echo "  -h, --help           Show this help message"
    echo "  -v, --verbose        Enable verbose output (level 1)"
    echo "  -vv                  Enable very verbose output (level 2)"
    echo "  --completion SHELL   Output shell completion script (bash, zsh, or fish)"
    echo ""
    echo "Verbosity Levels:"
    echo "  (none)   Summary only - task completion + errors/warnings"
    echo "  -v       Add package names and progress details"
    echo "  -vv      Show every file touched/checked (full detail)"
    echo ""
    echo "  Note: Verbosity flags can be combined:"
    echo "        -v -v          Same as -vv"
    echo "        --verbose --verbose  Same as -vv"
    echo ""
    echo "Examples:"
    echo "  $0 install                # Install with summary only"
    echo "  $0 install -v             # Install showing packages"
    echo "  $0 install -vv            # Install showing every file link"
    echo "  $0 install --verbose --verbose  # Same as -vv"
    echo "  $0 health                 # Diagnostics table"
    echo "  $0 health -v              # Detailed diagnostics"
    echo "  $0 update                 # Update with summary"
    echo "  $0 update -vv             # Update with all details"
    echo ""
    echo "Quick reference:"
    echo "  status   = Quick overview (symlinks + backups)"
    echo "  health   = Table format (use -v for detailed output)"
    echo "  install  = Clean summary (use -v/-vv for more detail)"
    echo "  update   = Clean summary (use -v/-vv for more detail)"
    echo ""
    echo "Shell Integration:"
    echo "  # In .bashrc or .zshrc:"
    echo "  source <($0 --completion bash)  # for bash"
    echo "  source <($0 --completion zsh)   # for zsh"
    echo "  source (\$0 --completion fish)  # for fish"
}

# Check if command exists
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Portable timeout function (works on Linux and macOS)
# Uses GNU timeout if available, otherwise falls back to Perl
portable_timeout() {
    local duration="$1"
    shift

    if command_exists timeout; then
        timeout "$duration" "$@"
    elif command_exists perl; then
        # Perl-based timeout (portable, available on macOS)
        perl -e 'alarm shift; exec @ARGV' "$duration" "$@"
    else
        # No timeout available, run command normally
        "$@"
    fi
}

# Check dependencies
# Get minimum version for a tool (bash 3.2 compatible - no associative arrays)
get_min_version() {
    local tool="$1"
    case "$tool" in
        git)  echo "2.0.0" ;;
        stow) echo "2.3" ;;
        zsh)  echo "5.0" ;;
        bash) echo "3.2" ;;  # Already enforced by our script
        tmux) echo "2.0" ;;
        *)    echo "" ;;  # No minimum version requirement
    esac
}

# Compare semantic versions (returns 0 if $1 >= $2)
# Works on both Linux (GNU sort) and macOS (BSD sort)
version_ge() {
    local v1="$1"
    local v2="$2"

    # Try GNU sort -V (Linux)
    if printf '%s\n%s\n' "$v2" "$v1" | sort -V -C 2>/dev/null; then
        return 0
    elif [[ $? -eq 2 ]]; then
        # Exit code 2 means sort -V not supported, try gsort (Homebrew)
        if command -v gsort >/dev/null 2>&1; then
            printf '%s\n%s\n' "$v2" "$v1" | gsort -V -C
            return $?
        fi

        # Fall back to bash-native comparison
        _version_ge_fallback "$v1" "$v2"
        return $?
    else
        # Exit code 1 means sort -V worked but comparison failed
        return 1
    fi
}

# Fallback version comparison for systems without sort -V (bash 3.2 compatible)
# Returns 0 if $1 >= $2
_version_ge_fallback() {
    local v1="$1"
    local v2="$2"

    # Split versions by dots (IFS localized to read command)
    IFS=. read -ra ver1 <<< "$v1"
    IFS=. read -ra ver2 <<< "$v2"

    # Compare each component
    local max_len=${#ver1[@]}
    [[ ${#ver2[@]} -gt $max_len ]] && max_len=${#ver2[@]}

    local i
    for ((i=0; i<max_len; i++)); do
        local num1="${ver1[i]:-0}"
        local num2="${ver2[i]:-0}"

        # Strip letters from end (e.g., "3a" -> "3")
        num1="${num1%%[a-z]*}"
        num2="${num2%%[a-z]*}"

        # Compare numerically
        if ((10#$num1 > 10#$num2)); then
            return 0
        elif ((10#$num1 < 10#$num2)); then
            return 1
        fi
    done

    # All components equal
    return 0
}

# Check specific tool version and return current version on stdout
# Returns: 0 if version >= minimum, 1 otherwise
check_tool_version() {
    local tool="$1"
    local min_version="$2"
    local current_version=""

    case "$tool" in
        git)
            current_version=$(git --version 2>/dev/null | grep -oE '[0-9]+\.[0-9]+(\.[0-9]+)?' | head -n 1)
            ;;
        stow)
            current_version=$(stow --version 2>/dev/null | grep -oE '[0-9]+\.[0-9]+(\.[0-9]+)?' | head -n 1)
            ;;
        zsh)
            current_version=$(zsh --version 2>/dev/null | grep -oE '[0-9]+\.[0-9]+(\.[0-9]+)?' | head -n 1)
            ;;
        bash)
            # BASH_VERSION contains extra text - extract just the version
            current_version=$(echo "$BASH_VERSION" | grep -oE '[0-9]+\.[0-9]+(\.[0-9]+)?' | head -n 1)
            ;;
        tmux)
            # Use * instead of ? to handle optional letters properly
            current_version=$(tmux -V 2>/dev/null | grep -oE '[0-9]+\.[0-9]+[a-z]*' | head -n 1)
            ;;
    esac

    # Output current version for caller
    echo "$current_version"

    if [[ -z "$current_version" ]]; then
        return 1  # Could not determine version
    fi

    if version_ge "$current_version" "$min_version"; then
        return 0  # Version is sufficient
    else
        return 1  # Version is too old
    fi
}

# Check dependencies with version requirements
# Usage: check_dependencies [verbosity]
#   verbosity 0 (default): Only show errors
#   verbosity 1 (-v): Show each tool being checked
#   verbosity 2 (-vv): Show version details for each tool
check_dependencies() {
    local verbosity="${1:-0}"

    log_info "Checking dependencies..."

    local missing_deps=()
    local missing_optional=()
    local outdated_deps=()
    local satisfied_deps=()
    local common_deps
    local optional_deps
    common_deps="$(get_required_deps common)"
    optional_deps="$(get_required_deps optional)"
    local all_deps="$common_deps $optional_deps"

    for dep in $all_deps; do
        if ! command_exists "$dep"; then
            # Check if this is a required (common) or optional dependency
            if [[ " $common_deps " =~ \ $dep\  ]]; then
                missing_deps+=("$dep")
                [[ $verbosity -ge 1 ]] && log_error "Checking $dep... not found"
            else
                missing_optional+=("$dep")
                [[ $verbosity -ge 1 ]] && log_warning "Checking $dep... not found"
            fi
        else
            # Check version if minimum is specified
            local min_version
            min_version=$(get_min_version "$dep")

            if [[ -n "$min_version" ]]; then
                # Capture version and check status in one call (efficiency fix from Copilot)
                local actual_version
                actual_version=$(check_tool_version "$dep" "$min_version" 2>&1)
                local check_status=$?

                if [[ $check_status -eq 0 ]]; then
                    # Version is sufficient
                    satisfied_deps+=("$dep:$actual_version:$min_version")
                    if [[ $verbosity -ge 2 ]]; then
                        log_success "Checking $dep... ${actual_version} (>= ${min_version})"
                    elif [[ $verbosity -ge 1 ]]; then
                        log_success "Checking $dep... ${actual_version}"
                    fi
                elif [[ -n "$actual_version" ]]; then
                    # Version was determined but is too old
                    outdated_deps+=("$dep (${actual_version} < ${min_version})")
                    if [[ $verbosity -ge 1 ]]; then
                        log_warning "Checking $dep... version too old (${actual_version} < ${min_version})"
                    fi
                else
                    # Could not determine version - treat as outdated
                    outdated_deps+=("$dep (unknown < ${min_version})")
                    if [[ $verbosity -ge 1 ]]; then
                        log_warning "Checking $dep... unable to determine version"
                    fi
                fi
            else
                # No version requirement
                satisfied_deps+=("$dep:present")
                if [[ $verbosity -ge 2 ]]; then
                    log_success "Checking $dep... present (no version requirement)"
                elif [[ $verbosity -ge 1 ]]; then
                    log_success "Checking $dep... present"
                fi
            fi
        fi
    done

    local has_errors=false

    if [[ ${#missing_deps[@]} -gt 0 ]]; then
        has_errors=true
        log_error "Missing required dependencies: ${missing_deps[*]}"
        echo ""
        echo "Install missing dependencies:"
        echo "  Ubuntu/Debian: sudo apt-get install ${missing_deps[*]}"
        echo "  macOS: brew install ${missing_deps[*]}"
        echo "  CentOS/RHEL: sudo yum install ${missing_deps[*]}"
        echo "  Fedora: sudo dnf install ${missing_deps[*]}"
        echo ""
    fi

    if [[ ${#missing_optional[@]} -gt 0 ]]; then
        log_warning "Missing optional dependencies: ${missing_optional[*]}"
        echo "  Installation will continue, but some features may be unavailable"
        echo ""
    fi

    if [[ ${#outdated_deps[@]} -gt 0 ]]; then
        has_errors=true
        log_error "Outdated dependencies detected:"
        for outdated in "${outdated_deps[@]}"; do
            echo "  ${SYMBOL_ERROR} $outdated"
        done
        echo ""
        echo "Update outdated dependencies:"
        echo "  Ubuntu/Debian: sudo apt-get update && sudo apt-get upgrade"
        echo "  macOS: brew upgrade"
        echo "  CentOS/RHEL: sudo yum update"
        echo "  Fedora: sudo dnf upgrade"
        echo ""
    fi

    if [[ "$has_errors" == true ]]; then
        return 1
    fi

    log_success "All dependencies satisfied"

    # Show summary at verbosity 1+
    if [[ $verbosity -ge 1 ]] && [[ ${#satisfied_deps[@]} -gt 0 ]]; then
        log_info "Total: ${#satisfied_deps[@]} dependencies satisfied"
    fi

    return 0
}

# Detect platform
detect_platform() {
    if [[ "$OSTYPE" == "darwin"* ]]; then
        echo "macos"
    elif [[ "$OSTYPE" == "linux-gnu"* ]]; then
        echo "linux"
    else
        echo "unknown"
    fi
}


# Determine merge strategy based on file type
determine_merge_strategy() {
    local target="$1"

    case "$target" in
        */.gitconfig*|*.gitconfig)
            echo "git-merge"
            ;;
        */hosts.yml|*/hosts.yaml)
            echo "yaml-replace"
            ;;
        *.yml|*.yaml)
            echo "yaml-append"
            ;;
        *)
            echo "replace"
            ;;
    esac
}

# Create backup of existing files
backup_existing() {
    log_info "Creating backup of existing files..."

    # Create backup directory
    if ! mkdir -p "$BACKUP_DIR"; then
        log_error "Failed to create backup directory: $BACKUP_DIR"
        suggest_fixes "backup" "$BACKUP_DIR"
        return 1
    fi

    local backed_up=0

    # Generate backup list dynamically from package definitions
    for package in "${PACKAGES[@]}"; do
        local files
        files=$(get_package_files "$package")
        IFS=',' read -ra file_array <<< "$files"

        for file in "${file_array[@]}"; do
        if [[ -e "$HOME/$file" ]]; then
            log_info "Backing up $file"
            if [[ -d "$HOME/$file" ]]; then
                if ! cp -r "$HOME/$file" "$BACKUP_DIR/" 2>/dev/null; then
                    log_error "Failed to copy directory $file"
                    suggest_fixes "backup" "$HOME/$file"
                    return 1
                fi
            else
                if ! cp "$HOME/$file" "$BACKUP_DIR/" 2>/dev/null; then
                    log_error "Failed to copy file $file"
                    suggest_fixes "backup" "$HOME/$file"
                    return 1
                fi
            fi
            # Remove existing file after backup to prevent stow conflicts
            if ! rm -rf "${HOME:?}/$file" 2>/dev/null; then
                log_error "Failed to remove $file"
                suggest_fixes "backup" "$HOME/$file"
                return 1
            fi
            ((backed_up++))
        else
            log_info "File $file does not exist, skipping"
        fi
        done
    done

    if [[ $backed_up -gt 0 ]]; then
        log_success "Backed up $backed_up files to $BACKUP_DIR"
    else
        log_info "No existing files to backup"
    fi

    return 0
}

# Initialize submodules
init_submodules() {
    log_info "Initializing git submodules..."

    if [[ ! -f "$DOTFILES_DIR/.gitmodules" ]]; then
        log_info "No submodules found"
        return 0
    fi

    cd "$DOTFILES_DIR" || {
        log_error "Failed to change to dotfiles directory: $DOTFILES_DIR"
        return 1
    }

    # Use portable timeout
    if ! portable_timeout "$GIT_TIMEOUT" git submodule update --init --recursive 2>&1 | prefix_output "│ "; then
        log_error "Failed to initialize git submodules (timeout or git error)"
        log_info "Try running: cd $DOTFILES_DIR && git submodule update --init --recursive"
        return 1
    fi

    log_success "Submodules initialized"
    return 0
}

# Process configuration templates (auto-discovered)
process_templates() {
    log_info "Processing configuration templates..."

    local template_count=0
    local failed_count=0

    # Process all .template files found in dotfiles directory
    while IFS= read -r template; do
        [[ -z "$template" ]] && continue

        local target="${template%.template}"

        if [[ ! -f "$template" ]]; then
            log_warning "Template not found: ${template#"$DOTFILES_DIR"/}"
            ((failed_count++))
            continue
        fi

        if cp "$template" "$target" 2>/dev/null; then
            log_info "Created ${target#"$DOTFILES_DIR"/} from template"
            ((template_count++))
        else
            log_error "Failed to copy template: ${template#"$DOTFILES_DIR"/}"
            suggest_fixes "template" "$template"
            ((failed_count++))
        fi
    done < <(find "$PACKAGES_DIR" -type f -name "*.template" 2>/dev/null | sort)

    if [[ $template_count -eq 0 ]] && [[ $failed_count -eq 0 ]]; then
        log_info "No template files found"
    elif [[ $template_count -gt 0 ]]; then
        log_success "Processed $template_count template(s)"
    fi

    if [[ $failed_count -gt 0 ]]; then
        log_error "Failed to process $failed_count template(s)"
        return 1
    fi

    return 0
}

# Merge git config using git-config command
merge_git_config() {
    local source="$1"
    local target="$2"

    # Read git config output (avoid process substitution hang)
    local config_output
    config_output=$(git -c "core.filemode=false" config --file "$source" --list 2>&1) || {
        log_error "Failed to read git config from: ${source#"$DOTFILES_DIR"/}"
        log_error "Git error: $config_output"
        suggest_fixes "git-config" "$source"
        return 1
    }

    # Apply each line to target
    while IFS= read -r line; do
        [[ -z "$line" ]] && continue
        local key="${line%%=*}"
        local value="${line#*=}"

        if ! git -c "core.filemode=false" config --file "$target" "$key" "$value" 2>/dev/null; then
            log_warning "Failed to set $key in ${target#"$DOTFILES_DIR"/}"
        fi
    done <<< "$config_output"

    return 0
}

# Secure permissions on secret config file
secure_secret_file() {
    local secret="$1"

    if [[ ! -f "$secret" ]]; then
        return 0
    fi

    if ! chmod "$SECRET_FILE_MODE" "$secret" 2>/dev/null; then
        log_warning "Failed to set secure permissions on ${secret#"$DOTFILES_DIR"/}"
        return 1
    fi

    return 0
}

# Merge secret configurations with templates (auto-discovered)
merge_secret_configs() {
    log_info "Merging secret configurations..."

    local merge_count=0
    local failed_count=0

    # Process all .secret files found in dotfiles directory
    while IFS= read -r secret; do
        [[ -z "$secret" ]] && continue
        [[ ! -f "$secret" ]] && continue

        # Set secure permissions on secret file unconditionally
        secure_secret_file "$secret"

        local target="${secret%.secret}"

        if [[ ! -f "$target" ]]; then
            log_warning "Target file not found for ${secret#"$DOTFILES_DIR"/}, skipping"
            continue
        fi

        local merge_type
        merge_type=$(determine_merge_strategy "$target")

        log_info "Merging ${secret#"$DOTFILES_DIR"/} -> ${target#"$DOTFILES_DIR"/} ($merge_type)"

        case "$merge_type" in
            git-merge)
                if merge_git_config "$secret" "$target"; then
                    ((merge_count++))
                else
                    log_error "Failed to merge git config from ${secret#"$DOTFILES_DIR"/}"
                    ((failed_count++))
                fi
                ;;
            yaml-append)
                if {
                    echo ""
                    echo "# Secret configuration"
                    cat "$secret"
                } >> "$target" 2>/dev/null; then
                    ((merge_count++))
                else
                    log_error "Failed to append secret config to ${target#"$DOTFILES_DIR"/}"
                    ((failed_count++))
                fi
                ;;
            yaml-replace|replace)
                if cp "$secret" "$target" 2>/dev/null; then
                    ((merge_count++))
                else
                    log_error "Failed to copy ${secret#"$DOTFILES_DIR"/} to ${target#"$DOTFILES_DIR"/}"
                    ((failed_count++))
                fi
                ;;
            *)
                log_warning "Unknown merge type: $merge_type for ${secret#"$DOTFILES_DIR"/}"
                ((failed_count++))
                ;;
        esac
    done < <(find "$DOTFILES_DIR" -type f -name "*.secret" 2>/dev/null | sort)

    if [[ $merge_count -eq 0 ]] && [[ $failed_count -eq 0 ]]; then
        log_info "No secret configuration files found"
    elif [[ $merge_count -gt 0 ]]; then
        log_success "Merged $merge_count secret config(s)"
    fi

    if [[ $failed_count -gt 0 ]]; then
        log_error "Failed to merge $failed_count secret config(s)"
        return 1
    fi

    return 0
}

# Install dotfiles using Stow with rollback support
install_dotfiles() {
    local verbosity="${1:-0}"

    # Set stow flags based on verbosity level
    local stow_flags="--restow --dir=$PACKAGES_DIR --target=$HOME"
    if [[ $verbosity -ge 2 ]]; then
        stow_flags="--verbose $stow_flags"
    fi

    # Only show header in verbose mode
    if [[ $verbosity -ge 1 ]]; then
        log_info "Installing dotfiles using Stow..."
    fi

    for package in "${PACKAGES[@]}"; do
        if [[ ! -d "$PACKAGES_DIR/$package" ]]; then
            log_warning "Package directory not found: $package, skipping"
            continue
        fi

        # Show package name at verbosity 1+
        if [[ $verbosity -ge 1 ]]; then
            log_info "Installing package: $package"
        fi

        # Add rollback action before installing
        add_rollback "stow --verbose --delete --dir='$PACKAGES_DIR' --target='$HOME' '$package' 2>/dev/null || true"

        # Run stow with appropriate output handling
        local stow_output
        local stow_result

        # shellcheck disable=SC2086
        if [[ $verbosity -ge 2 ]]; then
            # Level 2: Show all stow file operations
            if stow_output=$(stow $stow_flags "$package" 2>&1); then
                echo "$stow_output" | prefix_output "│ "
                INSTALLED_PACKAGES+=("$package")
                log_success "Installed $package"
                stow_result=0
            else
                echo "$stow_output" | prefix_output "│ "
                log_error "Failed to install package: $package"
                suggest_fixes "stow" "$package"
                return 1
            fi
        elif [[ $verbosity -eq 1 ]]; then
            # Level 1: Just show success per package
            if stow $stow_flags "$package" >/dev/null 2>&1; then
                INSTALLED_PACKAGES+=("$package")
                log_success "Installed $package"
                stow_result=0
            else
                log_error "Failed to install package: $package"
                suggest_fixes "stow" "$package"
                return 1
            fi
        else
            # Level 0: Silent, no package messages
            if stow $stow_flags "$package" >/dev/null 2>&1; then
                INSTALLED_PACKAGES+=("$package")
                stow_result=0
            else
                log_error "Failed to install package: $package"
                suggest_fixes "stow" "$package"
                return 1
            fi
        fi
    done

    return 0
}

# Suggest fixes for common errors
suggest_fixes() {
    local operation="$1"
    local context="$2"

    echo ""
    echo "Suggested fixes:"

    case $operation in
        stow)
            echo "  1. Check for conflicting files: ./dot status"
            echo "  2. Remove or backup conflicting files in $HOME"
            echo "  3. Check stow output above for specific conflicts"
            echo "  4. Try: stow --adopt $context (adopts existing files)"
            ;;
        backup)
            echo "  1. Check disk space: df -h $DOTFILES_DIR/backups"
            echo "  2. Check permissions: ls -la $DOTFILES_DIR/backups"
            echo "  3. Clean old backups: ./dot clean"
            ;;
        template)
            echo "  1. Check template exists: ls -la $DOTFILES_DIR/$context"
            echo "  2. Check target directory permissions"
            echo "  3. Verify template file is readable"
            ;;
        git-config)
            echo "  1. Check config syntax: git config --file $context --list"
            echo "  2. Verify file format (key=value)"
            echo "  3. Check for invalid characters or encoding issues"
            ;;
        network)
            echo "  1. Check internet connection: ping -c 1 github.com"
            echo "  2. Check if behind proxy/firewall"
            echo "  3. Try again later or check $context URL manually"
            ;;
        submodules)
            echo "  1. Check git access: git ls-remote $context"
            echo "  2. Verify SSH keys: ssh -T git@github.com"
            echo "  3. Try: cd $DOTFILES_DIR && git submodule update --init --recursive"
            ;;
        *)
            echo "  1. Check logs above for specific error details"
            echo "  2. Run with verbose mode: ./dot install -v"
            echo "  3. Check GitHub issues: https://github.com/hamishmorgan/.dotfiles/issues"
            ;;
    esac
    echo ""
}

# Check if file is properly linked
check_symlink() {
    local file="$1"
    local expected_target="$2"

    if [[ -L "$HOME/$file" ]]; then
        local target
        target=$(readlink "$HOME/$file")
        if [[ "$target" == *"$expected_target"* ]]; then
            log_success "$file is properly linked to $target"
            return 0
        else
            log_warning "$file is linked to $target (expected $expected_target)"
            return 1
        fi
    elif [[ -d "$HOME/$file" ]]; then
        # Directory exists - check if it contains stow-managed files
        # (Stow creates directories when linking nested structures)
        log_success "$file exists as directory (stow-managed)"
        return 0
    elif [[ -f "$HOME/$file" ]]; then
        log_warning "$file exists but is not a symlink"
        return 1
    else
        log_error "$file not found"
        return 1
    fi
}

# Generic package validation function
validate_package() {
    local package="$1"
    local display_name
    display_name=$(get_package_name "$package")
    local files
    files=$(get_package_files "$package")

    log_info "Validating $display_name configuration..."

    local errors=0
    IFS=',' read -ra file_array <<< "$files"

    for file in "${file_array[@]}"; do
        if ! check_symlink "$file" ".dotfiles/$package"; then
            ((errors++))
        fi
    done

    if [[ $errors -eq 0 ]]; then
        log_success "$display_name configuration validated successfully"
        return 0
    else
        log_error "$display_name validation failed with $errors errors"
        return 1
    fi
}

# Get list of backup directories
get_backup_dirs() {
    local backup_dirs=()
    for dir in "$DOTFILES_DIR"/${BACKUP_DIR_PREFIX}-*; do
        if [[ -d "$dir" ]]; then
            backup_dirs+=("$dir")
        fi
    done
    printf '%s\n' "${backup_dirs[@]}"
}

# Get backup statistics (count and total size)
# Returns: "count size_kb" (space-separated)
# Usage: read -r count size_kb <<< "$(get_backup_stats)"
get_backup_stats() {
    local count=0
    local total_size=0

    while IFS= read -r dir; do
        [[ -z "$dir" ]] && continue
        ((count++))
        local size
        size=$(du -sk "$dir" 2>/dev/null | cut -f1)
        ((total_size += size))
    done < <(get_backup_dirs)

    echo "$count $total_size"
}

# Automatically cleanup old backups if threshold exceeded
auto_cleanup_backups() {
    local backup_count
    backup_count=$(get_backup_dirs | wc -l | tr -d ' ')

    if [[ $backup_count -le $MAX_BACKUPS_TO_KEEP ]]; then
        return 0
    fi

    local backups_to_remove=$((backup_count - MAX_BACKUPS_TO_KEEP))
    log_info "Auto cleanup: $backup_count backups found, keeping $MAX_BACKUPS_TO_KEEP most recent, removing $backups_to_remove old backup(s)"

    clean_backups_silent "$MAX_BACKUPS_TO_KEEP"

    return 0
}

# Silent version of clean_backups for auto-cleanup
clean_backups_silent() {
    local keep_count="${1:-$MAX_BACKUPS_TO_KEEP}"

    local backup_dirs=()
    while IFS= read -r dir; do
        backup_dirs+=("$dir")
    done < <(get_backup_dirs | sort -r)

    local total_backups=${#backup_dirs[@]}

    if [[ $total_backups -eq 0 ]]; then
        return 0
    fi

    local removed_count=0

    for i in "${!backup_dirs[@]}"; do
        if [[ $i -ge $keep_count ]]; then
            local backup="${backup_dirs[$i]}"
            if rm -rf "$backup" 2>/dev/null; then
                ((removed_count++))
            fi
        fi
    done

    if [[ $removed_count -gt 0 ]]; then
        log_success "Removed $removed_count old backup(s)"
    fi

    return 0
}

# Count orphaned symlinks in home and .config directories
# Returns: count of orphaned symlinks
count_orphaned_symlinks() {
    local count=0

    # Check home directory dotfiles
    while IFS= read -r link; do
        [[ -L "$link" ]] && [[ ! -e "$link" ]] && ((count++))
    done < <(find "$HOME" -maxdepth 1 -type l -name ".*" 2>/dev/null)

    # Check .config directory
    if [[ -d "$HOME/.config" ]]; then
        while IFS= read -r link; do
            [[ -L "$link" ]] && [[ ! -e "$link" ]] && ((count++))
        done < <(find "$HOME/.config" -maxdepth 2 -type l 2>/dev/null)
    fi

    echo "$count"
}

# Show installation summary (used by install and update at verbosity 0)
show_installation_summary() {
    echo -e "   ${GREEN}${SYMBOL_SUCCESS}${NC} Dependencies satisfied"
    echo -e "   ${GREEN}${SYMBOL_SUCCESS}${NC} Submodules initialized"
    echo -e "   ${GREEN}${SYMBOL_SUCCESS}${NC} Templates processed"
    echo -e "   ${GREEN}${SYMBOL_SUCCESS}${NC} Secret configs merged"
    echo -e "   ${GREEN}${SYMBOL_SUCCESS}${NC} Packages installed"
}

# Display a single tip message
# Usage: show_tip "Run './dot health' to check"
show_tip() {
    echo -e "${BLUE}💡 Tip: $1${NC}"
}

# Display titled tips section with multiple items
# Usage: show_tips "Title" "Tip 1" "Tip 2" ...
show_tips() {
    local title="$1"
    shift

    echo ""
    echo -e "${BLUE}💡 ${title}:${NC}"
    while [[ $# -gt 0 ]]; do
        echo "   $1"
        shift
    done
}

# Show installation status
show_status() {
    show_command_header "Dotfiles Installation Status"

    # Count files and issues
    local total_files=0
    local installed_files=0
    local warning_files=0
    local missing_files=0

    show_section_separator "Installed Files"
    echo ""

    # Generate file list dynamically from package definitions
    for package in "${PACKAGES[@]}"; do
        local files
        files=$(get_package_files "$package")
        IFS=',' read -ra file_array <<< "$files"

        for file in "${file_array[@]}"; do
            ((total_files++))
            if [[ -L "$HOME/$file" ]]; then
                local target
                target=$(readlink "$HOME/$file")
                echo -e "   ${GREEN}${SYMBOL_SUCCESS}${NC} $file ${BLUE}→${NC} $target"
                ((installed_files++))
            elif [[ -d "$HOME/$file" ]]; then
                # Check if directory contains stow-managed files
                local stow_managed=false
                local stow_links
                stow_links=$(find "$HOME/$file" -maxdepth 3 -type l -exec readlink {} \; 2>/dev/null)
                if echo "$stow_links" | grep -Fq ".dotfiles/$package"; then
                    stow_managed=true
                fi

                if [[ "$stow_managed" == true ]]; then
                    echo -e "   ${GREEN}${SYMBOL_SUCCESS}${NC} $file ${BLUE}(stow-managed directory)${NC}"
                    ((installed_files++))
                else
                    echo -e "   ${YELLOW}${SYMBOL_WARNING}${NC} $file ${BLUE}(directory, not stow-managed)${NC}"
                    ((warning_files++))
                fi
            elif [[ -e "$HOME/$file" ]]; then
                echo -e "   ${YELLOW}${SYMBOL_WARNING}${NC} $file ${BLUE}(exists but not a symlink)${NC}"
                ((warning_files++))
            else
                echo -e "   ${RED}${SYMBOL_ERROR}${NC} $file ${BLUE}(not found)${NC}"
                ((missing_files++))
            fi
        done
    done

    echo ""
    show_section_separator "Backups"
    echo ""

    # Get backup statistics
    local backup_count backup_size_kb
    read -r backup_count backup_size_kb <<< "$(get_backup_stats)"

    if [[ $backup_count -eq 0 ]]; then
        echo "   No backup directories found"
    else
        # Get sorted backup directories for display
        local backup_dirs=()
        while IFS= read -r dir; do
            backup_dirs+=("$dir")
        done < <(get_backup_dirs | sort -r)

        local show_count=$((backup_count < MAX_BACKUPS_TO_DISPLAY ? backup_count : MAX_BACKUPS_TO_DISPLAY))

        for ((i=0; i<show_count; i++)); do
            local dir="${backup_dirs[$i]}"
            echo "   $(basename "$dir") ($(du -sh "$dir" | cut -f1))"
        done

        if [[ $backup_count -gt $MAX_BACKUPS_TO_DISPLAY ]]; then
            echo "   ... and $((backup_count - MAX_BACKUPS_TO_DISPLAY)) older backup(s)"
        fi

        echo ""
        echo "   Total: $backup_count backup(s) using $((backup_size_kb / KB_TO_MB))MB"
    fi

    echo ""
    show_command_summary "info" "$installed_files of $total_files files installed"

    # Show actionable tips
    if [[ $missing_files -gt 0 || $warning_files -gt 0 ]]; then
        echo ""
        [[ $missing_files -gt 0 ]] && show_tip "Run './dot install' to create missing symlinks"
        [[ $backup_count -gt $MAX_BACKUPS_TO_KEEP ]] && show_tip "Run './dot clean' to remove old backups"
    elif [[ $backup_count -gt $MAX_BACKUPS_TO_KEEP ]]; then
        echo ""
        show_tip "Run './dot clean' to remove old backups"
    fi
    echo ""
}

# Show diff preview of what would change
show_diff_preview() {
    show_command_header "Dotfiles Diff Preview"
    
    log_info "Comparing current state with dotfiles repository..."
    echo ""
    
    local changes_found=false
    local new_files=0
    local modified_files=0
    local wrong_target_files=0
    
    show_section_separator "File Changes"
    echo ""
    
    for package in "${PACKAGES[@]}"; do
        local package_files
        package_files=$(get_package_files "$package")
        
        IFS=',' read -ra files <<< "$package_files"
        
        for file in "${files[@]}"; do
            local dotfile_path="$DOTFILES_DIR/$package/$file"
            local home_path="$HOME/$file"
            
            # Skip if dotfile doesn't exist (shouldn't happen)
            [[ ! -e "$dotfile_path" ]] && continue
            
            if [[ -L "$home_path" ]]; then
                # It's a symlink - check target
                local target
                target=$(readlink "$home_path")
                local expected_target="$DOTFILES_DIR/$package/$file"
                
                # Check if symlink points to our dotfiles (allows any path format - absolute, relative, etc.)
                if [[ "$target" != *"${DOTFILES_DIR}/${package}/${file}"* ]]; then
                    echo -e "   ${YELLOW}${SYMBOL_WARNING}${NC} $file"
                    echo "      Current: symlink → $target"
                    echo "      Expected: symlink → $expected_target"
                    changes_found=true
                    ((wrong_target_files++))
                fi
                # Symlink points to correct location - no diff needed
            elif [[ -f "$home_path" ]]; then
                # Regular file - compare content
                if [[ -f "$dotfile_path" ]]; then
                    if ! diff -q "$home_path" "$dotfile_path" > /dev/null 2>&1; then
                        echo -e "   ${BLUE}${SYMBOL_INFO}${NC} $file ${YELLOW}(content differs)${NC}"
                        
                        # Show diff preview (first 25 lines)
                        local diff_output
                        diff_output=$(diff -u "$home_path" "$dotfile_path" 2>/dev/null || true)
                        
                        while IFS= read -r line; do
                            if [[ "$line" == -* ]]; then
                                echo -e "      ${RED}$line${NC}"
                            elif [[ "$line" == +* ]]; then
                                echo -e "      ${GREEN}$line${NC}"
                            else
                                echo "      $line"
                            fi
                        done < <(echo "$diff_output" | head -25)
                        
                        local diff_lines
                        diff_lines=$(echo "$diff_output" | grep -c '^')
                        if [[ $diff_lines -gt 25 ]]; then
                            echo "      ... ($(( diff_lines - 25 )) more lines)"
                        fi
                        
                        echo ""
                        changes_found=true
                        ((modified_files++))
                    fi
                fi
            elif [[ ! -e "$home_path" ]]; then
                # File doesn't exist - would be created
                echo -e "   ${GREEN}${SYMBOL_SUCCESS}${NC} $file ${GREEN}(would create new symlink)${NC}"
                changes_found=true
                ((new_files++))
            fi
        done
    done
    
    if ! $changes_found; then
        echo "   ${GREEN}${SYMBOL_SUCCESS}${NC} No changes detected - system matches repository"
    fi
    
    echo ""
    show_section_separator "Summary"
    echo ""
    
    if $changes_found; then
        [[ $new_files -gt 0 ]] && echo "   ${GREEN}${SYMBOL_SUCCESS}${NC} New files: $new_files"
        [[ $modified_files -gt 0 ]] && echo "   ${BLUE}${SYMBOL_INFO}${NC} Modified files: $modified_files"
        [[ $wrong_target_files -gt 0 ]] && echo "   ${YELLOW}${SYMBOL_WARNING}${NC} Wrong targets: $wrong_target_files"
        echo ""
        show_tip "Run ${BLUE}./dot install${NC} to apply these changes"
    else
        log_success "System is up to date with repository"
    fi
    
    echo ""
}

# Get backup age in days
get_backup_age_days() {
    local backup="$1"
    local backup_mtime
    backup_mtime=$(stat -c %Y "$backup" 2>/dev/null || stat -f %m "$backup" 2>/dev/null)
    echo $(( ($(date +%s) - backup_mtime) / SECONDS_PER_DAY ))
}

# List all available backups with details
list_backups() {
    show_command_header "Available Backups"

    local backup_dirs=()
    while IFS= read -r dir; do
        backup_dirs+=("$dir")
    done < <(get_backup_dirs | sort -r)

    if [[ ${#backup_dirs[@]} -eq 0 ]]; then
        show_section_separator
        echo ""
        log_info "No backups found"
        echo ""
        show_section_separator
        echo ""
        return 0
    fi

    show_section_separator
    echo ""
    printf "  ${BLUE}%-5s %-35s %-12s %-20s${NC}\n" "ID" "Name" "Size" "Created"
    echo "  ────────────────────────────────────────────────────────────────────────────"

    local id=1
    for dir in "${backup_dirs[@]}"; do
        local name
        name=$(basename "$dir")
        local created
        created=$(date -r "$dir" '+%Y-%m-%d %H:%M:%S' 2>/dev/null || echo "unknown")
        local size
        size=$(du -sh "$dir" 2>/dev/null | cut -f1)

        printf "  %-5s %-35s %-12s %-20s\n" "$id" "$name" "$size" "$created"
        ((id++))
    done

    echo ""
    show_section_separator
    echo ""
    log_info "Restore with: ${BLUE}./dot restore${NC} ${YELLOW}[BACKUP_ID|latest]${NC}"
    echo ""
}

# Restore from a specific backup
restore_from_backup() {
    local backup_id="$1"

    show_command_header "Dotfiles Restore"

    # Find backup directory
    local backup_dir=""
    if [[ "$backup_id" == "latest" ]]; then
        backup_dir=$(get_backup_dirs | sort -r | head -n 1)
        if [[ -z "$backup_dir" ]]; then
            log_error "No backups found"
            return 1
        fi
    else
        # Try exact directory name match first
        if [[ -d "$DOTFILES_DIR/backups/$backup_id" ]]; then
            backup_dir="$DOTFILES_DIR/backups/$backup_id"
        # Try with configured prefix
        elif [[ -d "$DOTFILES_DIR/${BACKUP_DIR_PREFIX}-$backup_id" ]]; then
            backup_dir="$DOTFILES_DIR/${BACKUP_DIR_PREFIX}-$backup_id"
        else
            log_error "Backup not found: $backup_id"
            log_info "Run ${BLUE}./dot backups${NC} to see available backups"
            return 1
        fi
    fi

    show_section_separator
    echo ""
    log_info "Backup: ${BLUE}$(basename "$backup_dir")${NC}"
    local created
    created=$(date -r "$backup_dir" '+%Y-%m-%d %H:%M:%S' 2>/dev/null || echo "unknown")
    log_info "Created: $created"
    local size
    size=$(du -sh "$backup_dir" 2>/dev/null | cut -f1)
    log_info "Size: $size"
    echo ""

    # Show what will be restored
    log_info "Files to restore:"
    local file_count=0
    local max_display="$RESTORE_DISPLAY_LIMIT"

    while IFS= read -r file; do
        if [[ $file_count -lt $max_display ]]; then
            local rel_path="${file#"$backup_dir"/}"
            echo "  ${SYMBOL_INFO} $rel_path"
        fi
        ((file_count++))
    done < <(find "$backup_dir" -type f -o -type l 2>/dev/null)

    if [[ $file_count -gt $max_display ]]; then
        echo "  ... and $((file_count - max_display)) more file(s)"
    fi
    echo ""

    # Confirm restoration
    read -r -p "Restore from this backup? (y/N): " confirm
    if [[ "$confirm" != "y" ]]; then
        log_info "Restore cancelled"
        return 0
    fi

    # Create safety backup before restore
    local safety_backup
    safety_backup="$DOTFILES_DIR/${RESTORE_SAFETY_PREFIX}-$(date +%s)"
    log_info "Creating safety backup..."
    if ! backup_existing_to "$safety_backup"; then
        log_warning "Could not create safety backup, but continuing..."
    else
        log_success "Safety backup: $(basename "$safety_backup")"
    fi

    echo ""

    # Uninstall current dotfiles
    log_info "Removing current dotfiles..."
    cmd_uninstall > /dev/null 2>&1

    # Restore files
    log_info "Restoring files from backup..."
    if cp -r "$backup_dir/"* "$HOME/" 2>/dev/null; then
        log_success "Files restored successfully"
    else
        log_error "Some files failed to restore"
        log_warning "You may need to restore manually from: $backup_dir"
        return 1
    fi

    echo ""
    show_section_separator
    echo ""
    log_success "Restore complete"
    echo ""
    show_tip "Reload shell to pick up restored configurations"

    if [[ -n "$safety_backup" ]]; then
        echo ""
        log_info "Safety backup available at: $(basename "$safety_backup")"
    fi
    echo ""

    return 0
}

# Backup to a specific directory
backup_existing_to() {
    local target_dir="$1"

    mkdir -p "$target_dir" || return 1

    for package in "${PACKAGES[@]}"; do
        local package_files
        package_files=$(get_package_files "$package")

        IFS=',' read -ra files <<< "$package_files"

        for file in "${files[@]}"; do
            local home_file="$HOME/$file"

            if [[ -e "$home_file" ]] || [[ -L "$home_file" ]]; then
                local file_dir
                file_dir=$(dirname "$file")

                mkdir -p "$target_dir/$file_dir"

                if [[ -L "$home_file" ]]; then
                    cp -P "$home_file" "$target_dir/$file" 2>/dev/null || true
                elif [[ -d "$home_file" ]]; then
                    cp -r "$home_file" "$target_dir/$file" 2>/dev/null || true
                else
                    cp "$home_file" "$target_dir/$file" 2>/dev/null || true
                fi
            fi
        done
    done

    return 0
}

# Clean up backup directories
clean_backups() {
    show_command_header "Backup Cleanup"

    local backup_dirs=()
    while IFS= read -r dir; do
        backup_dirs+=("$dir")
    done < <(get_backup_dirs | sort -r)

    local total_backups=${#backup_dirs[@]}

    if [[ $total_backups -eq 0 ]]; then
        show_section_separator
        echo ""
        log_info "No backup directories to clean"
        echo ""
        show_section_separator
        echo ""
        return 0
    fi

    # Configuration (can be overridden via environment)
    local keep_count=${BACKUP_KEEP_COUNT:-5}
    local keep_days=${BACKUP_KEEP_DAYS:-30}

    echo " ${BLUE}Policy:${NC} Keep $keep_count most recent OR newer than $keep_days days"
    echo ""

    # Categorize backups
    local -a to_remove=()
    local -a to_keep=()

    for i in "${!backup_dirs[@]}"; do
        local backup="${backup_dirs[$i]}"
        local backup_name
        backup_name=$(basename "$backup")

        # Keep first N backups regardless of age (sorted newest first)
        if [[ $i -lt $keep_count ]]; then
            to_keep+=("$backup")
            continue
        fi

        # For older backups, check age
        local backup_age_days
        backup_age_days=$(get_backup_age_days "$backup")

        if [[ $backup_age_days -gt $keep_days ]]; then
            to_remove+=("$backup")
        else
            to_keep+=("$backup")
        fi
    done

    # Show summary
    if [[ ${#to_remove[@]} -eq 0 ]]; then
        show_section_separator
        echo ""
        log_success "All backups within retention policy"
        echo ""
        show_section_separator
        echo ""
        return 0
    fi

    # Calculate size to free
    local remove_size=0
    for backup in "${to_remove[@]}"; do
        local size_kb
        size_kb=$(du -sk "$backup" 2>/dev/null | cut -f1)
        ((remove_size += size_kb))
    done

    show_section_separator "To Remove (${#to_remove[@]} backups, $((remove_size / KB_TO_MB))MB)"
    echo ""
    for backup in "${to_remove[@]}"; do
        local backup_name
        backup_name=$(basename "$backup")
        local size
        size=$(du -sh "$backup" 2>/dev/null | cut -f1)
        local age_days
        age_days=$(get_backup_age_days "$backup")
        echo "   - $backup_name ($size, ${age_days}d old)"
    done

    # Calculate size to keep
    local keep_size=0
    for backup in "${to_keep[@]}"; do
        local size_kb
        size_kb=$(du -sk "$backup" 2>/dev/null | cut -f1)
        ((keep_size += size_kb))
    done

    echo ""
    show_section_separator "To Keep (${#to_keep[@]} backups, $((keep_size / KB_TO_MB))MB)"
    echo ""
    for backup in "${to_keep[@]}"; do
        local backup_name
        backup_name=$(basename "$backup")
        local size
        size=$(du -sh "$backup" 2>/dev/null | cut -f1)
        echo "   - $backup_name ($size)"
    done

    echo ""
    show_section_separator
    echo ""
    read -p " Remove ${#to_remove[@]} old backup(s)? (y/N): " -n 1 -r
    echo
    echo ""

    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        log_info "Backup cleanup cancelled"
        echo ""
        return 0
    fi

    # Remove old backups
    local removed_count=0
    local freed_space=0

    for backup in "${to_remove[@]}"; do
        local backup_name
        backup_name=$(basename "$backup")
        local size_kb
        size_kb=$(du -sk "$backup" 2>/dev/null | cut -f1)

        if rm -rf "$backup" 2>/dev/null; then
            log_success "Removed $backup_name"
            ((removed_count++))
            ((freed_space += size_kb))
        else
            log_error "Failed to remove $backup_name"
        fi
    done

    echo ""
    show_command_summary "success" "Removed $removed_count backup(s), freed $((freed_space / KB_TO_MB))MB"
    echo ""

    return 0
}

# Uninstall dotfiles
uninstall_dotfiles() {
    show_command_header "Dotfiles Uninstall"

    show_section_separator "Removing Packages"
    echo ""

    local uninstalled_count=0
    for package in "${PACKAGES[@]}"; do
        if [[ ! -d "$PACKAGES_DIR/$package" ]]; then
            continue
        fi

        if stow --verbose --delete --dir="$PACKAGES_DIR" --target="$HOME" "$package" 2>&1 | indent_section_output; then
            ((uninstalled_count++))
        fi
    done

    echo ""
    show_command_summary "success" "Uninstalled $uninstalled_count package(s)"
    echo ""
}

# Main command handlers
cmd_install() {
    local verbosity="${1:-0}"
    local start_time
    start_time=$(date +%s)

    show_command_header "Dotfiles Installation"
    INSTALLATION_IN_PROGRESS=true

    # Step 1: Backup
    if ! run_step "1" "Backup Existing Files" "$verbosity" 2 "Backup completed" \
         "Backup failed - aborting installation" backup_existing; then
        log_info "Backup directory: $BACKUP_DIR"
        INSTALLATION_IN_PROGRESS=false
        return 1
    fi

    # Step 2: Install
    show_numbered_section "2" "Installation Pipeline"
    if ! run_with_verbosity "$verbosity" 1 "" run_installation_pipeline "$verbosity"; then
        echo ""
        log_error "Installation pipeline failed"
        log_info "Run './dot health' to check installation state"
        INSTALLATION_IN_PROGRESS=false
        return 1
    fi

    # Show summary for level 0
    if [[ $verbosity -eq 0 ]]; then
        show_installation_summary
    fi
    echo ""

    INSTALLATION_IN_PROGRESS=false

    local end_time
    end_time=$(date +%s)
    local duration=$((end_time - start_time))

    show_command_summary "success" "INSTALLED" "$duration"

    show_tips "Next steps" \
        "1. Restart your terminal or run: source ~/.zshrc" \
        "2. Set zsh as default shell: chsh -s \$(which zsh)" \
        "3. Verify installation: $0 health"
    echo ""

    auto_cleanup_backups

    return 0
}


# Validate configuration syntax
validate_config_syntax() {
    log_info "Validating configuration syntax..."

    local errors=0

    # Validate git config
    if [[ -f "$HOME/.gitconfig" ]]; then
        if git config --list >/dev/null 2>&1; then
            log_success "Git configuration syntax valid"
        else
            log_error "Git configuration syntax error"
            ((errors++))
        fi
    fi

    # Validate tmux config
    if [[ -f "$HOME/.tmux.conf" ]]; then
        if command_exists tmux; then
            local tmux_test_session="dotfiles-config-test"
            if tmux -f "$HOME/.tmux.conf" -C new-session -d -s "$tmux_test_session" >/dev/null 2>&1; then
                log_success "Tmux configuration syntax valid"
                # Kill the test session
                tmux kill-session -t "$tmux_test_session" >/dev/null 2>&1 || true
            else
                log_error "Tmux configuration syntax error"
                ((errors++))
            fi
        else
            log_info "Tmux not installed, skipping syntax check"
        fi
    fi

    # Validate zsh config
    if [[ -f "$HOME/.zshrc" ]]; then
        if command_exists zsh; then
            if zsh -n "$HOME/.zshrc" 2>/dev/null; then
                log_success "Zsh configuration syntax valid"
            else
                log_error "Zsh configuration syntax error"
                ((errors++))
            fi
        else
            log_info "Zsh not installed, skipping syntax check"
        fi
    fi

    # Validate bash config
    if [[ -f "$HOME/.bashrc" ]]; then
        if bash -n "$HOME/.bashrc" 2>/dev/null; then
            log_success "Bash configuration syntax valid"
        else
            log_error "Bash configuration syntax error"
            ((errors++))
        fi
    fi

    return $errors
}

# Check for orphaned symlinks
check_orphaned_symlinks() {
    log_info "Checking for orphaned symlinks..."

    local orphaned=0

    # Check dotfiles in home directory
    while IFS= read -r link; do
        if [[ -L "$link" ]] && [[ ! -e "$link" ]]; then
            log_warning "Orphaned symlink: ${link#"$HOME"/}"
            ((orphaned++))
        fi
    done < <(find "$HOME" -maxdepth 1 -type l -name ".*" 2>/dev/null)

    # Check .config directory
    if [[ -d "$HOME/.config" ]]; then
        while IFS= read -r link; do
            if [[ -L "$link" ]] && [[ ! -e "$link" ]]; then
                log_warning "Orphaned symlink: ${link#"$HOME"/}"
                ((orphaned++))
            fi
        done < <(find "$HOME/.config" -maxdepth 2 -type l 2>/dev/null)
    fi

    if [[ $orphaned -eq 0 ]]; then
        log_success "No orphaned symlinks found"
    else
        log_warning "Found $orphaned orphaned symlink(s)"
    fi

    return $orphaned
}

# Check backup directory health
check_backup_health() {
    log_info "Checking backup directory health..."

    local backup_count=0
    local total_size=0

    while IFS= read -r dir; do
        [[ -z "$dir" ]] && continue
        ((backup_count++))
        local size
        size=$(du -sk "$dir" 2>/dev/null | cut -f1)
        ((total_size += size))
    done < <(find "$DOTFILES_DIR/backups" -maxdepth 1 -type d -name "dotfiles-backup-*" 2>/dev/null)

    if [[ $backup_count -eq 0 ]]; then
        log_info "No backup directories found"
    else
        log_info "Found $backup_count backup(s) using $((total_size / KB_TO_MB))MB"

        if [[ $backup_count -gt $MAX_BACKUPS_TO_KEEP ]]; then
            log_warning "Consider cleaning old backups: ./dot clean"
        fi
    fi

    return 0
}

# Check submodule health
check_submodule_health() {
    log_info "Checking submodule health..."

    local issues=0

    # Check if .gitmodules exists
    if [[ ! -f "$DOTFILES_DIR/.gitmodules" ]]; then
        log_info "No submodules configured"
        return 0
    fi

    # Check Oh My Zsh submodule
    local omz_path="$PACKAGES_DIR/zsh/.oh-my-zsh"
    if [[ -d "$omz_path" ]]; then
        # Check if submodule is initialized
        if [[ -f "$omz_path/.git" ]] || [[ -d "$omz_path/.git" ]]; then
            # Check for uncommitted changes in submodule
            if git -C "$omz_path" diff-index --quiet HEAD -- 2>/dev/null; then
                log_success "Oh My Zsh submodule is clean"
            else
                log_warning "Oh My Zsh submodule has uncommitted changes"
            fi

            # Check if submodule is detached
            if git -C "$omz_path" symbolic-ref -q HEAD >/dev/null 2>&1; then
                log_success "Oh My Zsh submodule on branch"
            else
                log_info "Oh My Zsh submodule in detached HEAD state (normal)"
            fi
        else
            log_error "Oh My Zsh submodule not initialized"
            log_info "Run: git submodule update --init --recursive"
            ((issues++))
        fi
    else
        log_error "Oh My Zsh directory missing"
        ((issues++))
    fi

    return $issues
}

# Check git repository status
check_git_repo_status() {
    log_info "Checking dotfiles repository status..."

    local issues=0

    # Check if in a git repository
    if ! git -C "$DOTFILES_DIR" rev-parse --git-dir >/dev/null 2>&1; then
        log_error "Not in a git repository"
        return 1
    fi

    # Check for uncommitted changes
    if git -C "$DOTFILES_DIR" diff-index --quiet HEAD -- 2>/dev/null; then
        log_success "Working directory clean"
    else
        log_warning "Working directory has uncommitted changes"
        local changed_count
        changed_count=$(git -C "$DOTFILES_DIR" status --porcelain | wc -l)
        log_info "  $changed_count file(s) modified"
    fi

    # Check current branch
    local current_branch
    current_branch=$(git -C "$DOTFILES_DIR" rev-parse --abbrev-ref HEAD 2>/dev/null)
    log_info "Current branch: $current_branch"

    # Check if branch has upstream
    if git -C "$DOTFILES_DIR" rev-parse --abbrev-ref '@{upstream}' >/dev/null 2>&1; then
        # Check if up to date with remote
        git -C "$DOTFILES_DIR" fetch origin "$current_branch" --dry-run 2>/dev/null
        local ahead
        local behind
        ahead=$(git -C "$DOTFILES_DIR" rev-list --count '@{upstream}..HEAD' 2>/dev/null || echo "0")
        behind=$(git -C "$DOTFILES_DIR" rev-list --count 'HEAD..@{upstream}' 2>/dev/null || echo "0")

        if [[ $ahead -eq 0 ]] && [[ $behind -eq 0 ]]; then
            log_success "Up to date with origin"
        elif [[ $ahead -gt 0 ]] && [[ $behind -eq 0 ]]; then
            log_warning "Branch is ahead of origin by $ahead commit(s)"
            log_info "  Consider: git push"
        elif [[ $ahead -eq 0 ]] && [[ $behind -gt 0 ]]; then
            log_warning "Branch is behind origin by $behind commit(s)"
            log_info "  Consider: git pull"
            ((issues++))
        else
            log_warning "Branch has diverged ($ahead ahead, $behind behind)"
            log_info "  Consider: git pull --rebase"
            ((issues++))
        fi
    else
        log_info "No upstream branch configured"
    fi

    return $issues
}

# Check template and secret config consistency
check_template_consistency() {
    log_info "Checking template/secret config consistency..."

    local issues=0

    # Discover templates
    local template_list
    template_list=$(discover_templates)

    if [[ -z "$template_list" ]]; then
        log_info "No templates configured"
        return 0
    fi

    # Check each template
    while IFS=: read -r template target; do
        [[ -z "$template" ]] && continue

        local secret="${template%.template}.secret"
        local package_dir
        package_dir=$(dirname "$template")
        local target_file="$HOME/$target"

        # Check if secret config exists
        if [[ ! -f "$secret" ]]; then
            log_warning "Template without secret config: ${template#"$DOTFILES_DIR"/}"
            log_info "  Consider creating: ${secret#"$DOTFILES_DIR"/}"
        fi

        # Check if merged file is stale
        if [[ -f "$target_file" ]] && [[ -f "$secret" ]]; then
            if [[ "$template" -nt "$target_file" ]] || [[ "$secret" -nt "$target_file" ]]; then
                log_warning "Stale merged config: ${target_file#"$HOME"/}"
                log_info "  Source files newer than target. Run: ./dot install"
                ((issues++))
            else
                log_success "${target} up to date"
            fi
        fi
    done <<< "$template_list"

    # Check for orphaned secret configs
    while IFS= read -r secret; do
        [[ -z "$secret" ]] && continue

        local template="${secret%.secret}.template"
        if [[ ! -f "$template" ]]; then
            log_warning "Secret config without template: ${secret#"$DOTFILES_DIR"/}"
        fi
    done < <(discover_secret_configs)

    return $issues
}

# Check file permissions
check_file_permissions() {
    log_info "Checking file permissions..."

    local errors=0
    local warnings=0

    # Check secret config files (should not be world-readable)
    while IFS= read -r secret; do
        [[ -z "$secret" ]] && continue
        [[ ! -f "$secret" ]] && continue

        local perms
        perms=$(stat -c '%a' "$secret" 2>/dev/null || stat -f '%A' "$secret" 2>/dev/null)

        # Check if world-readable (last digit > 0)
        if [[ "${perms: -1}" != "0" ]]; then
            log_warning "Secret config is world-readable: ${secret#"$DOTFILES_DIR"/}"
            log_info "  Consider: chmod $SECRET_FILE_MODE $secret"
            ((warnings++))
        else
            log_success "${secret#"$DOTFILES_DIR"/} has secure permissions"
        fi
    done < <(discover_secret_configs)

    # Check for accidentally committed secrets (this is an ERROR not a warning)
    if [[ -f "$PACKAGES_DIR/git/.gitconfig.secret" ]]; then
        if git -C "$DOTFILES_DIR" ls-files --error-unmatch "packages/git/.gitconfig.secret" >/dev/null 2>&1; then
            log_error "Secret git config is tracked by git (potential secrets leak)"
            log_info "  Run: git rm --cached packages/git/.gitconfig.secret"
            ((errors++))
        else
            log_success "Secret configs properly ignored by git"
        fi
    fi

    if [[ $warnings -gt 0 ]]; then
        log_info "Found $warnings permission warning(s) - consider fixing for better security"
    fi

    return $errors
}

# Check shell integration
check_shell_integration() {
    log_info "Checking shell integration..."

    local issues=0

    # Check if we're actually using our shell configs
    if [[ -n "$ZSH_VERSION" ]]; then
        if [[ -L "$HOME/.zshrc" ]]; then
            local target
            target=$(readlink "$HOME/.zshrc")
            if [[ "$target" == *".dotfiles"* ]]; then
                log_success "Using dotfiles .zshrc"
            else
                log_warning "Shell config symlink points elsewhere: $target"
                ((issues++))
            fi
        else
            log_error ".zshrc is not a symlink to dotfiles"
            ((issues++))
        fi
    elif [[ -n "$BASH_VERSION" ]]; then
        if [[ -L "$HOME/.bashrc" ]]; then
            local target
            target=$(readlink "$HOME/.bashrc")
            if [[ "$target" == *".dotfiles"* ]]; then
                log_success "Using dotfiles .bashrc"
            else
                log_warning "Shell config symlink points elsewhere: $target"
                ((issues++))
            fi
        else
            log_error ".bashrc is not a symlink to dotfiles"
            ((issues++))
        fi
    fi

    # Check PATH includes our custom directories
    if [[ ":$PATH:" == *":$HOME/bin:"* ]] || [[ ":$PATH:" == *":$HOME/.local/bin:"* ]]; then
        log_success "Custom bin directories in PATH"
    else
        log_warning "Custom bin directories not in PATH"
        log_info "  Expected: ~/bin or ~/.local/bin in PATH"
    fi

    # Check if dotfiles repo is in expected location
    if [[ "$DOTFILES_DIR" == "$HOME/.dotfiles" ]]; then
        log_success "Dotfiles in standard location"
    else
        log_info "Dotfiles location: $DOTFILES_DIR (non-standard)"
    fi

    return $issues
}

# Check for stow conflicts
check_stow_conflicts() {
    log_info "Checking for potential stow conflicts..."

    local issues=0

    # Check each package for potential conflicts
    for package in "${PACKAGES[@]}"; do
        local package_dir="$DOTFILES_DIR/$package"
        [[ ! -d "$package_dir" ]] && continue

        # Find all files in package
        while IFS= read -r file; do
            [[ -z "$file" ]] && continue

            local rel_path="${file#"$package_dir"/}"
            local target_path="$HOME/$rel_path"

            # Skip if it's already our symlink
            if [[ -L "$target_path" ]]; then
                local link_target
                link_target=$(readlink "$target_path")
                if [[ "$link_target" == *".dotfiles/$package"* ]]; then
                    continue
                fi
            fi

            # Check if target exists but is not our symlink
            if [[ -e "$target_path" ]] && [[ ! -L "$target_path" ]]; then
                log_warning "Unmanaged file would conflict: $rel_path"
                log_info "  File exists but not managed by stow"
                ((issues++))
            fi
        done < <(find "$package_dir" -type f -not -path "*/.*" 2>/dev/null)
    done

    if [[ $issues -eq 0 ]]; then
        log_success "No stow conflicts detected"
    fi

    return $issues
}

# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
# Unified Display Functions
# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

# Display a command header
show_command_header() {
    local title="$1"
    echo ""
    echo -e "${BLUE}╭──────────────────────────────────────────────────────────╮${NC}"
    printf "${BLUE}│${NC}  %-56s${BLUE}│${NC}\n" "$title"
    echo -e "${BLUE}╰──────────────────────────────────────────────────────────╯${NC}"
    echo ""
}

# Display a section separator with title
show_section_separator() {
    local title="$1"
    if [[ -n "$title" ]]; then
        echo -e " ${BLUE}${title}${NC} ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
    else
        echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
    fi
}

# Display a numbered section separator
show_numbered_section() {
    local num="$1"
    local title="$2"
    echo -e " ${BLUE}${num}. ${title}${NC} ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
    echo ""
}

# Display a command summary/result
show_command_summary() {
    local status="$1"      # "success" or "info"
    local message="$2"
    local duration="$3"     # optional

    echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

    if [[ "$status" == "success" ]]; then
        if [[ -n "$duration" ]]; then
            printf " Result: %b${SYMBOL_SUCCESS} ${message}%b" "$GREEN" "$NC"
            local msg_len=$((10 + ${#message}))  # "Result: ✓ " + message (✓ = 2 cols)
            local padding=$((47 - msg_len))
            [[ $padding -lt 1 ]] && padding=1
            printf "%${padding}s" ""
            printf "Duration: %.1fs\n" "$duration"
        else
            printf " %b${SYMBOL_SUCCESS} ${message}%b\n" "$GREEN" "$NC"
        fi
    else
        printf " %b${SYMBOL_INFO} ${message}%b\n" "$BLUE" "$NC"
    fi

    echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
}

# Display table header
show_health_table_header() {
    echo ""
    echo -e "${BLUE}╭──────────────────────────────────────────────────────────╮${NC}"
    echo -e "${BLUE}│${NC}  Dotfiles Health Check                                   ${BLUE}│${NC}"
    echo -e "${BLUE}╰──────────────────────────────────────────────────────────╯${NC}"
    echo ""
    printf " %-28s %-12s %s\n" "Category" "Status" "Details"
    echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
}

# Display table row with spinner
show_health_check_spinner() {
    local num="$1"
    local category="$2"

    # Show spinner - ⠿ is a wide character (2 cols)
    printf " %3s %-25s ${BLUE}⠿ Checking...${NC}\r" "$num." "$category"  # Right-align number with dot
}

# Display table row
show_health_table_row() {
    local num="$1"
    local category="$2"
    local status="$3"
    local details="$4"

    local status_text
    local status_color
    case "$status" in
        pass)
            status_text="${SYMBOL_SUCCESS} Pass"
            status_color="$GREEN"
            ;;
        fail)
            status_text="${SYMBOL_ERROR} Fail"
            status_color="$RED"
            ;;
        warn)
            status_text="${SYMBOL_WARNING} Warn"
            status_color="$YELLOW"
            ;;
        info)
            status_text="${SYMBOL_INFO} Info"
            status_color="$BLUE"
            ;;
    esac

    # Clear the spinner line and show result
    # Note: Success/Error/Warning symbols are wide chars (2 cols), Info is regular (1 col)
    # "✓ Pass" visually = 2+1+4 = 7 cols, need 12 total = 5 more spaces
    # "⚠ Warn" visually = 2+1+4 = 7 cols, need 12 total = 5 more spaces
    # "∙ Info" visually = 1+1+4 = 6 cols, need 12 total = 6 more spaces
    # "✗ Fail" visually = 2+1+4 = 7 cols, need 12 total = 5 more spaces
    printf "\r\033[K %3s %-25s " "$num." "$category"  # Right-align number with dot (max "11.")

    # Add extra space for info status since ∙ is narrower than emoji
    if [[ "$status" == "info" ]]; then
        printf "%b%s%b      " "$status_color" "$status_text" "$NC"  # 6 spaces for info
    else
        printf "%b%s%b     " "$status_color" "$status_text" "$NC"  # 5 spaces for others
    fi

    printf "%s\n" "$details"
}

# Display health summary
show_health_summary() {
    local status="$1"
    local error_count="$2"
    local warn_count="$3"
    local duration="$4"

    echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

    if [[ "$status" == "healthy" ]]; then
        # Border = 60 visual cols total
        # " Result: ✓ HEALTHY" = 1 + 8 + 2 (wide symbol) + 8 = 19 visual cols
        # "Duration: X.Xs" = 14 chars
        # Padding: Use 23 spaces for better visual alignment with table above
        printf " Result: %b${SYMBOL_SUCCESS} HEALTHY%b" "$GREEN" "$NC"
        printf "%23s" ""
        printf "Duration: %.1fs\n" "$duration"
    else
        local issues_text="$error_count error"
        [[ $error_count -ne 1 ]] && issues_text="${issues_text}s"
        if [[ $warn_count -gt 0 ]]; then
            issues_text="$issues_text, $warn_count warning"
            [[ $warn_count -ne 1 ]] && issues_text="${issues_text}s"
        fi
        # " Result: ✗ UNHEALTHY (text)" - calculate padding for visual alignment
        # 1 + 8 + 2 (wide symbol) + 10 ("UNHEALTHY ") + 1 ("(") + text + 1 (")") = 23 + text
        local visible_length=$((23 + ${#issues_text}))
        local padding=$((42 - visible_length))  # Align with healthy case (23 spaces base)
        [[ $padding -lt 1 ]] && padding=1

        printf " Result: %b${SYMBOL_ERROR} UNHEALTHY%b (%s)" "$RED" "$NC" "$issues_text"
        printf "%${padding}s" ""
        printf "Duration: %.1fs\n" "$duration"
    fi

    echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
}

# Count files/symlinks for a check
count_symlinks() {
    local count=0
    for package in "${PACKAGES[@]}"; do
        local files
        files=$(get_package_files "$package")
        IFS=',' read -ra file_array <<< "$files"
        count=$((count + ${#file_array[@]}))
    done
    echo "$count"
}

# Comprehensive health check command (table format)
cmd_health() {
    local verbose="${1:-false}"

    # If verbose mode, show the old detailed output
    if [[ "$verbose" == "true" ]]; then
        cmd_health_verbose
        return $?
    fi

    # Track timing
    local start_time
    start_time=$(date +%s)

    # Initialize result tracking (bash 3.2 compatible - parallel arrays)
    local check_statuses=()
    local check_details=()
    local check_outputs=()

    local total_errors=0
    local total_warnings=0

    # Display table header immediately
    show_health_table_header

    # Run checks and display results progressively
    local output
    local result

    # 1. Symlink integrity
    show_health_check_spinner "1" "Symlink Integrity"
    output=""
    for package in "${PACKAGES[@]}"; do
        if ! validate_package "$package" >/dev/null 2>&1; then
            output="${output}Package $package validation failed\n"
            ((total_errors++))
        fi
    done

    if [[ -n "$output" ]]; then
        check_statuses+=("fail")
        check_details+=("Validation errors")
        check_outputs+=("$output")
        show_health_table_row "1" "Symlink Integrity" "fail" "Validation errors"
    else
        local file_count
        file_count=$(count_symlinks)
        check_statuses+=("pass")
        check_details+=("$file_count files linked")
        check_outputs+=("")
        show_health_table_row "1" "Symlink Integrity" "pass" "$file_count files linked"
    fi

    # 2. Configuration syntax
    show_health_check_spinner "2" "Configuration Syntax"
    output=$(validate_config_syntax 2>&1)
    result=$?
    if [[ $result -ne 0 ]]; then
        check_statuses+=("fail")
        check_details+=("Syntax errors")
        check_outputs+=("$output")
        ((total_errors += result))
        show_health_table_row "2" "Configuration Syntax" "fail" "Syntax errors"
    else
        check_statuses+=("pass")
        check_details+=("All configs valid")
        check_outputs+=("")
        show_health_table_row "2" "Configuration Syntax" "pass" "All configs valid"
    fi

    # 3. Submodule health
    show_health_check_spinner "3" "Submodule Health"
    output=$(check_submodule_health 2>&1)
    result=$?
    if [[ $result -ne 0 ]]; then
        check_statuses+=("fail")
        check_details+=("Issues found")
        check_outputs+=("$output")
        ((total_errors += result))
        show_health_table_row "3" "Submodule Health" "fail" "Issues found"
    else
        check_statuses+=("pass")
        check_details+=("Oh My Zsh clean")
        check_outputs+=("")
        show_health_table_row "3" "Submodule Health" "pass" "Oh My Zsh clean"
    fi

    # 4. Git repository status
    show_health_check_spinner "4" "Git Repository"
    output=$(check_git_repo_status 2>&1)
    result=$?
    if [[ $result -ne 0 ]]; then
        check_statuses+=("warn")
        check_details+=("Uncommitted changes")
        check_outputs+=("$output")
        ((total_warnings += result))
        show_health_table_row "4" "Git Repository" "warn" "Uncommitted changes"
    else
        check_statuses+=("pass")
        check_details+=("Clean, up-to-date")
        check_outputs+=("")
        show_health_table_row "4" "Git Repository" "pass" "Clean, up-to-date"
    fi

    # 5. Template/secret config consistency
    show_health_check_spinner "5" "Template Consistency"
    output=$(check_template_consistency 2>&1)
    result=$?
    local template_count=0
    template_count=$(discover_templates | wc -l)
    if [[ $result -ne 0 ]]; then
        check_statuses+=("warn")
        check_details+=("Stale configs")
        check_outputs+=("$output")
        ((total_warnings += result))
        show_health_table_row "5" "Template Consistency" "warn" "Stale configs"
    else
        check_statuses+=("pass")
        check_details+=("$template_count template(s) synced")
        check_outputs+=("")
        show_health_table_row "5" "Template Consistency" "pass" "$template_count template(s) synced"
    fi

    # 6. File permissions
    show_health_check_spinner "6" "File Permissions"
    output=$(check_file_permissions 2>&1)
    result=$?
    if [[ $result -ne 0 ]]; then
        check_statuses+=("fail")
        check_details+=("Insecure permissions")
        check_outputs+=("$output")
        ((total_errors += result))
        show_health_table_row "6" "File Permissions" "fail" "Insecure permissions"
    else
        check_statuses+=("pass")
        check_details+=("Secrets secured")
        check_outputs+=("")
        show_health_table_row "6" "File Permissions" "pass" "Secrets secured"
    fi

    # 7. Shell integration
    show_health_check_spinner "7" "Shell Integration"
    output=$(check_shell_integration 2>&1)
    result=$?
    local shell_name=""
    if [[ -n "$ZSH_VERSION" ]]; then
        shell_name="Zsh"
    elif [[ -n "$BASH_VERSION" ]]; then
        shell_name="Bash"
    fi

    if [[ $result -ne 0 ]]; then
        check_statuses+=("warn")
        check_details+=("Issues detected")
        check_outputs+=("$output")
        ((total_warnings += result))
        show_health_table_row "7" "Shell Integration" "warn" "Issues detected"
    else
        check_statuses+=("pass")
        check_details+=("$shell_name active")
        check_outputs+=("")
        show_health_table_row "7" "Shell Integration" "pass" "$shell_name active"
    fi

    # 8. Stow conflicts
    show_health_check_spinner "8" "Stow Conflicts"
    output=$(check_stow_conflicts 2>&1)
    result=$?
    if [[ $result -ne 0 ]]; then
        check_statuses+=("fail")
        check_details+=("$result conflict(s)")
        check_outputs+=("$output")
        ((total_errors += result))
        show_health_table_row "8" "Stow Conflicts" "fail" "$result conflict(s)"
    else
        check_statuses+=("pass")
        check_details+=("No conflicts")
        check_outputs+=("")
        show_health_table_row "8" "Stow Conflicts" "pass" "No conflicts"
    fi

    # 9. Orphaned symlinks
    show_health_check_spinner "9" "Orphaned Symlinks"
    output=$(check_orphaned_symlinks 2>&1)
    result=$?
    if [[ $result -ne 0 ]]; then
        check_statuses+=("warn")
        check_details+=("$result found")
        check_outputs+=("$output")
        show_health_table_row "9" "Orphaned Symlinks" "warn" "$result found"
        # Don't count as error, just warning
    else
        check_statuses+=("pass")
        check_details+=("None found")
        check_outputs+=("")
        show_health_table_row "9" "Orphaned Symlinks" "pass" "None found"
    fi

    # 10. Dependencies
    show_health_check_spinner "10" "Dependencies"
    if check_dependencies >/dev/null 2>&1; then
        check_statuses+=("pass")
        check_details+=("All satisfied")
        check_outputs+=("")
        show_health_table_row "10" "Dependencies" "pass" "All satisfied"
    else
        output=$(check_dependencies 2>&1)
        check_statuses+=("fail")
        check_details+=("Missing deps")
        check_outputs+=("$output")
        ((total_errors++))
        show_health_table_row "10" "Dependencies" "fail" "Missing deps"
    fi

    # 11. Backup health
    show_health_check_spinner "11" "Backup Health"
    local backup_count backup_size_kb
    read -r backup_count backup_size_kb <<< "$(get_backup_stats)"

    if [[ $backup_count -eq 0 ]]; then
        check_statuses+=("pass")
        check_details+=("No backups")
        check_outputs+=("")
        show_health_table_row "11" "Backup Health" "pass" "No backups"
    else
        check_statuses+=("info")
        check_details+=("$backup_count backups ($((backup_size_kb / KB_TO_MB))MB)")
        check_outputs+=("")
        show_health_table_row "11" "Backup Health" "info" "$backup_count backups ($((backup_size_kb / KB_TO_MB))MB)"
    fi

    # Calculate duration
    local end_time
    end_time=$(date +%s)
    local duration=$((end_time - start_time))

    echo ""

    # Show summary
    if [[ $total_errors -eq 0 ]]; then
        show_health_summary "healthy" 0 "$total_warnings" "$duration"
    else
        show_health_summary "unhealthy" "$total_errors" "$total_warnings" "$duration"
    fi

    echo ""

    # Check if we have maintenance items to show
    local has_maintenance=false
    if [[ "${check_statuses[8]}" == "warn" ]] || [[ "${check_statuses[10]}" == "info" && $backup_count -gt 10 ]]; then
        has_maintenance=true
    fi

    # Show detailed issues if any
    if [[ $total_errors -gt 0 ]] || [[ $total_warnings -gt 0 ]] || [[ "$has_maintenance" == "true" ]]; then
        local shown_errors=false
        local shown_warnings=false

        # Show errors first
        for i in "${!check_statuses[@]}"; do
            if [[ "${check_statuses[$i]}" == "fail" ]] && [[ -n "${check_outputs[$i]}" ]]; then
                if [[ "$shown_errors" == "false" ]]; then
                    echo -e "${RED}${SYMBOL_ERROR} Critical Issues:${NC}"
                    shown_errors=true
                fi

                local category_name=""
                case $i in
                    0) category_name="Symlink Integrity" ;;
                    1) category_name="Configuration Syntax" ;;
                    2) category_name="Submodule Health" ;;
                    3) category_name="Git Repository" ;;
                    4) category_name="Template Consistency" ;;
                    5) category_name="File Permissions" ;;
                    6) category_name="Shell Integration" ;;
                    7) category_name="Stow Conflicts" ;;
                    8) category_name="Orphaned Symlinks" ;;
                    9) category_name="Dependencies" ;;
                    10) category_name="Backup Health" ;;
                esac

                echo "  $((i + 1)). $category_name"
                echo -e "${check_outputs[$i]}" | sed 's/^/     /'
            fi
        done

        # Show warnings
        for i in "${!check_statuses[@]}"; do
            if [[ "${check_statuses[$i]}" == "warn" ]] && [[ -n "${check_outputs[$i]}" ]]; then
                # Check if there's actually output to display
                local warning_output
                warning_output=$(echo -e "${check_outputs[$i]}" | grep -E "^(${SYMBOL_WARNING}|${SYMBOL_INFO})")

                if [[ -n "$warning_output" ]]; then
                    if [[ "$shown_warnings" == "false" ]]; then
                        [[ "$shown_errors" == "true" ]] && echo ""
                        echo -e "${YELLOW}${SYMBOL_WARNING} Warnings:${NC}"
                        shown_warnings=true
                    fi

                    # shellcheck disable=SC2001
                    echo "$warning_output" | sed 's/^/  /'
                fi
            fi
        done

        # Show maintenance items
        if [[ "$has_maintenance" == "true" ]]; then
            [[ "$shown_errors" == "true" || "$shown_warnings" == "true" ]] && echo ""
            echo -e "${YELLOW}${SYMBOL_WARNING} Maintenance Items:${NC}"

            if [[ "${check_statuses[8]}" == "warn" ]]; then
                echo "  • ${check_details[8]} orphaned symlinks (non-critical)"
            fi

            if [[ "${check_statuses[10]}" == "info" && $backup_count -gt $MAX_BACKUPS_TO_KEEP ]]; then
                echo "  • $backup_count backups using $((backup_size_kb / KB_TO_MB))MB - run './dot clean' to free space"
            fi
        fi

        # Show quick fix suggestion
        if [[ $total_errors -gt 0 ]]; then
            echo ""
            show_tip "Quick fix: Run './dot install' to resolve most issues"
        fi
    fi

    echo ""
    show_tip "Run './dot health -v' for detailed output"
    echo ""

    # Return appropriate exit code
    if [[ $total_errors -eq 0 ]]; then
        return 0
    else
        return 1
    fi
}

# Indent output for verbose mode sections
indent_section_output() {
    # Indent 3 spaces and replace any remaining large dots (●) with SYMBOL_INFO (∙)
    # Note: log_info already outputs ∙ via SYMBOL_INFO, but this catches any legacy output
    sed 's/^/   /' | sed "s/●/${SYMBOL_INFO}/g"
}

# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
# Execution Helpers - Reduce Verbosity Duplication
# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

# Execute command with verbosity-appropriate output
# Usage: run_with_verbosity VERBOSITY THRESHOLD SUCCESS_MSG COMMAND [ARGS...]
# Arguments:
#   VERBOSITY - current verbosity level (0, 1, 2+)
#   THRESHOLD - verbosity level needed to show details (usually 1 or 2)
#   SUCCESS_MSG - message to show if successful and verbosity < threshold
#   COMMAND - command to execute
#   ARGS - arguments to command
# Returns: exit code of command
run_with_verbosity() {
    local verbosity="$1"
    local threshold="$2"
    local success_msg="$3"
    shift 3
    # Remaining args are the command to execute

    if [[ $verbosity -ge $threshold ]]; then
        # Show detailed output (indented)
        "$@" 2>&1 | indent_section_output
        return $?
    else
        # Run silently and show summary
        if "$@" >/dev/null 2>&1; then
            if [[ -n "$success_msg" ]]; then
                echo -e "   ${GREEN}${SYMBOL_SUCCESS}${NC} $success_msg"
            fi
            return 0
        else
            return 1
        fi
    fi
}

# Execute a numbered step with consistent formatting and error handling
# Usage: run_step NUM TITLE VERBOSITY THRESHOLD SUCCESS_MSG ERROR_MSG COMMAND [ARGS...]
run_step() {
    local num="$1"
    local title="$2"
    local verbosity="$3"
    local threshold="$4"
    local success_msg="$5"
    local error_msg="$6"
    shift 6
    # Remaining args are the command

    show_numbered_section "$num" "$title"

    if run_with_verbosity "$verbosity" "$threshold" "$success_msg" "$@"; then
        echo ""
        return 0
    else
        echo ""
        log_error "$error_msg"
        return 1
    fi
}

# Execute a health check section with consistent formatting
# Usage: run_health_check NUM TITLE CHECK_FUNCTION
run_health_check() {
    local num="$1"
    local title="$2"
    local check_function="$3"

    echo -e " ${BLUE}${num}. ${title}${NC} ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
    echo ""
    $check_function 2>&1 | indent_section_output
    # Capture exit code from check_function (first command in pipe)
    local result=${PIPESTATUS[0]}
    echo ""
    return "$result"
}

# Verbose health check (detailed output with unified design)
cmd_health_verbose() {
    # Track timing
    local start_time
    start_time=$(date +%s)

    local total_errors=0
    local total_warnings=0

    # Display same header as regular mode
    echo ""
    echo -e "${BLUE}╭──────────────────────────────────────────────────────────╮${NC}"
    echo -e "${BLUE}│${NC}  Dotfiles Health Check ${BLUE}(Detailed)${NC}                       ${BLUE}│${NC}"
    echo -e "${BLUE}╰──────────────────────────────────────────────────────────╯${NC}"
    echo ""

    # 1. Symlink integrity
    echo -e " ${BLUE}1. Symlink Integrity${NC} ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
    echo ""
    for package in "${PACKAGES[@]}"; do
        validate_package "$package" 2>&1 | indent_section_output || ((total_errors++))
    done
    echo ""

    # 2. Configuration syntax
    local syntax_result
    run_health_check "2" "Configuration Syntax" validate_config_syntax && syntax_result=0 || syntax_result=$?
    ((total_errors += syntax_result))

    # 3. Submodule health
    local submodule_result
    run_health_check "3" "Submodule Health" check_submodule_health && submodule_result=0 || submodule_result=$?
    ((total_errors += submodule_result))

    # 4. Git repository status
    local git_result
    run_health_check "4" "Git Repository" check_git_repo_status && git_result=0 || git_result=$?
    ((total_warnings += git_result))

    # 5. Template/secret config consistency
    local template_result
    run_health_check "5" "Template Consistency" check_template_consistency && template_result=0 || template_result=$?
    ((total_warnings += template_result))

    # 6. File permissions
    local perm_result
    run_health_check "6" "File Permissions" check_file_permissions && perm_result=0 || perm_result=$?
    ((total_errors += perm_result))

    # 7. Shell integration
    local shell_result
    run_health_check "7" "Shell Integration" check_shell_integration && shell_result=0 || shell_result=$?
    ((total_warnings += shell_result))

    # 8. Stow conflicts
    local stow_result
    run_health_check "8" "Stow Conflicts" check_stow_conflicts && stow_result=0 || stow_result=$?
    ((total_errors += stow_result))

    # 9. Orphaned symlinks
    run_health_check "9" "Orphaned Symlinks" check_orphaned_symlinks
    # Note: Orphaned symlinks are warnings, not errors

    # 10. Dependencies
    # Pass verbosity 1 to show each tool being checked in verbose health mode
    check_dependencies_verbose() {
        check_dependencies 1
    }
    if ! run_health_check "10" "Dependencies" check_dependencies_verbose; then
        ((total_errors++))
    fi

    # 11. Backup health
    run_health_check "11" "Backup Health" check_backup_health

    # Calculate duration
    local end_time
    end_time=$(date +%s)
    local duration=$((end_time - start_time))

    # Show summary using same format as regular mode
    if [[ $total_errors -eq 0 ]]; then
        show_health_summary "healthy" 0 "$total_warnings" "$duration"
    else
        show_health_summary "unhealthy" "$total_errors" "$total_warnings" "$duration"
    fi

    # Show maintenance items if any
    local backup_count=0
    while IFS= read -r dir; do
        [[ -z "$dir" ]] && continue
        ((backup_count++))
    done < <(get_backup_dirs)

    local orphaned_count=0
    orphaned_count=$(find "$HOME" -maxdepth 1 -type l -name ".*" 2>/dev/null | while IFS= read -r link; do
        [[ -L "$link" ]] && [[ ! -e "$link" ]] && echo 1
    done | wc -l)

    if [[ $orphaned_count -gt 0 || $backup_count -gt 10 ]]; then
        echo ""
        echo -e "${YELLOW}${SYMBOL_WARNING} Maintenance Items:${NC}"

        if [[ $orphaned_count -gt 0 ]]; then
            echo "  • $orphaned_count orphaned symlink(s) (non-critical)"
        fi

        if [[ $backup_count -gt 10 ]]; then
            local backup_size=0
            while IFS= read -r dir; do
                [[ -z "$dir" ]] && continue
                local size
                size=$(du -sk "$dir" 2>/dev/null | cut -f1)
                ((backup_size += size))
            done < <(get_backup_dirs)
            echo "  • $backup_count backups using $((backup_size / KB_TO_MB))MB - run './dot clean' to free space"
        fi
    fi

    echo ""
    show_tip "Run './dot health' for quick summary view"
    echo ""

    # Return appropriate exit code
    if [[ $total_errors -eq 0 ]]; then
        return 0
    else
        return 1
    fi
}

# Update gitignore globals from gitignore.io
update_gitignore() {
    log_info "Updating .gitignore-globals from toptal.com..."

    local types="linux,osx,windows"
    local url="https://www.toptal.com/developers/gitignore/api/$types"
    local gitignore_file="$PACKAGES_DIR/git/.gitignore-globals"

    # Add timeout to prevent hanging
    if portable_timeout "$CURL_TIMEOUT" curl -s "$url" > "$gitignore_file.tmp" 2>&1; then
        if [[ -s "$gitignore_file.tmp" ]]; then
            mv "$gitignore_file.tmp" "$gitignore_file"
            log_success "Updated .gitignore-globals with latest patterns"
            return 0
        else
            rm -f "$gitignore_file.tmp"
            log_error "Downloaded file is empty"
            return 1
        fi
    else
        rm -f "$gitignore_file.tmp"
        log_error "Failed to download .gitignore-globals (timeout or network error)"
        suggest_fixes "network" "$url"
        return 1
    fi
}

# Update Oh My Zsh
update_oh_my_zsh() {
    log_info "Checking for Oh My Zsh updates..."

    if command_exists omz; then
        if omz update 2>&1 | prefix_output "│ "; then
            log_success "Oh My Zsh updated successfully"
        else
            log_warning "Oh My Zsh update failed or no updates available"
        fi
    else
        log_warning "Oh My Zsh not available for update"
    fi
}

# Remove broken or mispointed dotfile symlinks
# This handles cases where packages were moved (e.g., bash/ -> packages/bash/)
remove_mispointed_symlinks() {
    local verbosity="${1:-0}"
    local removed_count=0
    
    # Find all symlinks in $HOME that point to $DOTFILES_DIR
    while IFS= read -r symlink; do
        local target
        target="$(readlink "$symlink")"
        
        # Check if symlink is broken OR points to wrong location
        if [[ ! -e "$symlink" ]] || [[ "$target" == "$DOTFILES_DIR/"* && "$target" != "$PACKAGES_DIR/"* ]]; then
            if [[ $verbosity -ge 2 ]]; then
                log_info "Removing outdated symlink: ${symlink#"$HOME"/}"
            fi
            rm -f "$symlink"
            ((removed_count++))
        fi
    done < <(find "$HOME" -maxdepth 1 -type l 2>/dev/null)
    
    # Also check .config directory
    if [[ -d "$HOME/.config" ]]; then
        while IFS= read -r symlink; do
            local target
            target="$(readlink "$symlink")"
            
            if [[ ! -e "$symlink" ]] || [[ "$target" == *"$DOTFILES_DIR/"* && "$target" != *"$PACKAGES_DIR/"* ]]; then
                if [[ $verbosity -ge 2 ]]; then
                    log_info "Removing outdated symlink: ${symlink#"$HOME"/}"
                fi
                rm -f "$symlink"
                ((removed_count++))
            fi
        done < <(find "$HOME/.config" -maxdepth 3 -type l 2>/dev/null)
    fi
    
    if [[ $removed_count -gt 0 && $verbosity -ge 1 ]]; then
        log_info "Removed $removed_count outdated symlink(s)"
    fi
    
    return 0
}

# Common installation pipeline
run_installation_pipeline() {
    local verbosity="${1:-0}"

    # Skip dependency check if environment variable is set (useful for CI)
    if [[ "${SKIP_DEPENDENCY_CHECK:-}" != "true" ]]; then
        if ! check_dependencies "$verbosity"; then
            log_error "Cannot proceed without required dependencies"
            exit 1
        fi
    else
        log_info "Skipping dependency check (SKIP_DEPENDENCY_CHECK=true)"
    fi

    if ! init_submodules; then
        log_error "Submodule initialization failed"
        suggest_fixes "submodules" "$DOTFILES_DIR/.gitmodules"
        return 1
    fi

    if ! process_templates; then
        log_error "Template processing failed"
        return 1
    fi

    if ! merge_secret_configs; then
        log_error "Secret config merging failed"
        return 1
    fi

    if ! install_dotfiles "$verbosity"; then
        log_error "Stow installation failed"
        return 1
    fi

    return 0
}

cmd_update() {
    local verbosity="${1:-0}"
    local start_time
    start_time=$(date +%s)

    show_command_header "Dotfiles Update"

    # Step 1: Update global configs
    show_numbered_section "1" "Update Global Configurations"
    if run_with_verbosity "$verbosity" 2 "" update_gitignore; then
        # Success - show result for level 0-1
        if [[ $verbosity -lt 2 ]]; then
            echo -e "   ${GREEN}${SYMBOL_SUCCESS}${NC} Global gitignore updated"
        fi
    else
        # Failed or skipped - show warning
        if [[ $verbosity -lt 2 ]]; then
            echo -e "   ${YELLOW}${SYMBOL_WARNING}${NC} Global gitignore update failed or skipped"
        fi
    fi
    echo ""

    # Step 2: Update Oh My Zsh
    show_numbered_section "2" "Update Oh My Zsh"
    if run_with_verbosity "$verbosity" 2 "" update_oh_my_zsh; then
        # Success - show result for level 0-1
        if [[ $verbosity -lt 2 ]]; then
            echo -e "   ${GREEN}${SYMBOL_SUCCESS}${NC} Oh My Zsh updated"
        fi
    else
        # Failed or skipped - could be up to date
        if [[ $verbosity -lt 2 ]]; then
            echo -e "   ${BLUE}${SYMBOL_INFO}${NC} Oh My Zsh already up to date"
        fi
    fi
    echo ""

    # Step 3: Clean up outdated symlinks
    if [[ $verbosity -ge 1 ]]; then
        show_numbered_section "3" "Clean Up Outdated Symlinks"
        remove_mispointed_symlinks "$verbosity"
        echo ""
    else
        remove_mispointed_symlinks 0
    fi
    
    # Step 4: Reinstall
    show_numbered_section "4" "Reinstall Dotfiles"
    if ! run_with_verbosity "$verbosity" 1 "" run_installation_pipeline "$verbosity"; then
        echo ""
        log_error "Installation pipeline failed"
        return 1
    fi

    # Show summary for level 0
    if [[ $verbosity -eq 0 ]]; then
        show_installation_summary
    fi
    echo ""

    local end_time
    end_time=$(date +%s)
    local duration=$((end_time - start_time))

    show_command_summary "success" "UPDATED" "$duration"
    echo ""

    auto_cleanup_backups

    return 0
}

cmd_status() {
    show_status
}

cmd_diff() {
    show_diff_preview
}

cmd_backup() {
    backup_existing
}

cmd_backups() {
    list_backups
}

cmd_restore() {
    local backup_id="${1:-latest}"
    restore_from_backup "$backup_id"
}

cmd_clean() {
    clean_backups
}

cmd_uninstall() {
    uninstall_dotfiles
}

cmd_enable() {
    local package="$1"
    enable_package "$package"
}

cmd_disable() {
    local package="$1"
    disable_package "$package"
}

cmd_packages() {
    list_packages
}

cmd_security() {
    security_audit
}

# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
# Package Management Functions
# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

# Check if a package is installed
is_package_installed() {
    local package="$1"
    local package_files
    package_files=$(get_package_files "$package")

    IFS=',' read -ra files <<< "$package_files"

    # Check if at least one file from the package is a symlink to dotfiles
    for file in "${files[@]}"; do
        local home_file="$HOME/$file"
        if [[ -L "$home_file" ]]; then
            local target
            target=$(readlink "$home_file")
            if [[ "$target" == *".dotfiles/$package/"* ]] || [[ "$target" == "$DOTFILES_DIR/$package/"* ]]; then
                return 0  # Package is installed
            fi
        fi
    done

    return 1  # Package not installed
}

# Enable (install) a specific package
enable_package() {
    local package="$1"

    if [[ -z "$package" ]]; then
        log_error "Package name required"
        log_info "Usage: ./dot enable PACKAGE"
        log_info "Available packages: ${PACKAGES[*]}"
        return 1
    fi

    # Validate package exists
    local package_exists=false
    for pkg in "${PACKAGES[@]}"; do
        if [[ "$pkg" == "$package" ]]; then
            package_exists=true
            break
        fi
    done

    if ! $package_exists; then
        log_error "Unknown package: $package"
        log_info "Available packages: ${PACKAGES[*]}"
        return 1
    fi

    if [[ ! -d "$DOTFILES_DIR/$package" ]]; then
        log_error "Package directory not found: $package"
        return 1
    fi

    # Check if already installed
    if is_package_installed "$package"; then
        log_info "Package already enabled: $package"
        return 0
    fi

    log_info "Enabling package: $package"

    # Install package with stow
    if stow --verbose --restow --dir="$PACKAGES_DIR" --target="$HOME" "$package" 2>&1 | prefix_output "│ "; then
        log_success "Package enabled: $package"
        return 0
    else
        log_error "Failed to enable package: $package"
        return 1
    fi
}

# Disable (uninstall) a specific package
disable_package() {
    local package="$1"

    if [[ -z "$package" ]]; then
        log_error "Package name required"
        log_info "Usage: ./dot disable PACKAGE"
        return 1
    fi

    # Validate package exists
    local package_exists=false
    for pkg in "${PACKAGES[@]}"; do
        if [[ "$pkg" == "$package" ]]; then
            package_exists=true
            break
        fi
    done

    if ! $package_exists; then
        log_error "Unknown package: $package"
        log_info "Available packages: ${PACKAGES[*]}"
        return 1
    fi

    # Check if installed
    if ! is_package_installed "$package"; then
        log_info "Package already disabled: $package"
        return 0
    fi

    log_info "Disabling package: $package"

    # Remove package symlinks with stow
    if stow --verbose --delete --dir="$PACKAGES_DIR" --target="$HOME" "$package" 2>&1 | prefix_output "│ "; then
        log_success "Package disabled: $package"
        return 0
    else
        log_error "Failed to disable package: $package"
        return 1
    fi
}

# List all packages and their installation status
list_packages() {
    show_command_header "Package Management"

    show_section_separator
    echo ""
    printf "  ${BLUE}%-15s %-12s %s${NC}\n" "Package" "Status" "Description"
    echo "  ────────────────────────────────────────────────────────────────"

    for package in "${PACKAGES[@]}"; do
        local status="disabled"
        local symbol="${SYMBOL_ERROR}"
        local color="$RED"

        if is_package_installed "$package"; then
            status="enabled"
            symbol="${SYMBOL_SUCCESS}"
            color="$GREEN"
        fi

        # Get package description
        local description=""
        case "$package" in
            system)  description="System-wide configuration" ;;
            git)     description="Git configuration and aliases" ;;
            zsh)     description="Zsh shell with Oh My Zsh" ;;
            tmux)    description="Tmux terminal multiplexer" ;;
            gh)      description="GitHub CLI configuration" ;;
            gnuplot) description="Gnuplot configuration" ;;
            bash)    description="Bash shell configuration" ;;
            *)       description="Unknown package" ;;
        esac

        printf "  ${color}${symbol}${NC} %-15s %-12s %s\n" "$package" "($status)" "$description"
    done

    echo ""
    show_section_separator
    echo ""
    log_info "Commands:"
    echo "  ${BLUE}./dot enable${NC} ${YELLOW}PACKAGE${NC}   Enable a package"
    echo "  ${BLUE}./dot disable${NC} ${YELLOW}PACKAGE${NC}  Disable a package"
    echo "  ${BLUE}./dot packages${NC}          List packages (this command)"
    echo ""
}

# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
# Security Audit Functions
# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

# Run security audit on dotfiles
security_audit() {
    show_command_header "Security Audit"
    
    local issues_found=0
    
    # 1. Check for accidentally committed secrets
    show_numbered_section "1" "Checking for Committed Secrets"
    
    local patterns=(
        "password.*="
        "api[_-]?key.*="
        "secret.*="
        "token.*="
        "private[_-]?key.*="
        "aws[_-]?access"
        "BEGIN.*PRIVATE KEY"
    )
    
    local secrets_found=false
    for pattern in "${patterns[@]}"; do
        local matches
        matches=$(git grep -E -n -i "$pattern" 2>/dev/null || true)
        
        if [[ -n "$matches" ]]; then
            if ! $secrets_found; then
                echo -e "   ${YELLOW}${SYMBOL_WARNING}${NC} Potential secret patterns found:"
                secrets_found=true
            fi
            echo "   Pattern: $pattern"
            while IFS= read -r line; do
                echo "     $line"
            done <<< "$matches"
            echo ""
            ((issues_found++))
        fi
    done
    
    if ! $secrets_found; then
        echo -e "   ${GREEN}${SYMBOL_SUCCESS}${NC} No secret patterns in tracked files"
    fi
    echo ""
    
    # 2. Check file permissions on secret files
    show_numbered_section "2" "Checking Secret File Permissions"
    
    local insecure_files=()
    
    while IFS= read -r secret_file; do
        [[ -z "$secret_file" ]] && continue
        local perms
        perms=$(stat -c "%a" "$secret_file" 2>/dev/null || stat -f "%OLp" "$secret_file" 2>/dev/null || echo "000")
        perms=${perms: -3}
        
        if [[ "$perms" != "600" ]] && [[ "$perms" != "400" ]]; then
            insecure_files+=("$secret_file ($perms)")
            ((issues_found++))
        fi
    done < <(find "$DOTFILES_DIR" -name "*.secret" -type f 2>/dev/null)
    
    if [[ ${#insecure_files[@]} -gt 0 ]]; then
        echo -e "   ${YELLOW}${SYMBOL_WARNING}${NC} Insecure permissions on secret files:"
        for file in "${insecure_files[@]}"; do
            echo -e "     ${SYMBOL_WARNING} ${file#"$DOTFILES_DIR"/}"
        done
        echo -e "   ${BLUE}${SYMBOL_INFO}${NC} Fix with: chmod 600 FILE (or 400)"
    else
        echo -e "   ${GREEN}${SYMBOL_SUCCESS}${NC} All secret files have secure permissions"
    fi
    echo ""
    
    # 3. Check .gitignore coverage
    show_numbered_section "3" "Checking .gitignore Coverage"
    
    
    local unignored_secrets=()
    local untracked_unignored=()
    
    while IFS= read -r secret_file; do
        [[ -z "$secret_file" ]] && continue
        if git check-ignore -q "$secret_file" 2>/dev/null; then
            : # properly ignored
        else
            # Check if file is tracked
            if git ls-files --error-unmatch "$secret_file" >/dev/null 2>&1; then
                unignored_secrets+=("$secret_file")
                ((issues_found++))
            else
                # Untracked but not ignored - potential future commit risk
                untracked_unignored+=("$secret_file")
                ((issues_found++))
            fi
        fi
    done < <(find "$DOTFILES_DIR" -name "*.secret" -type f 2>/dev/null)
    
    if [[ ${#unignored_secrets[@]} -gt 0 ]]; then
        echo -e "   ${RED}${SYMBOL_ERROR}${NC} Secret files tracked in git:"
        for file in "${unignored_secrets[@]}"; do
            echo -e "     ${SYMBOL_ERROR} ${file#"$DOTFILES_DIR"/}"
        done
        echo -e "   ${RED}${SYMBOL_ERROR}${NC} These files are committed to git!"
        echo ""
    fi
    
    if [[ ${#untracked_unignored[@]} -gt 0 ]]; then
        echo -e "   ${YELLOW}${SYMBOL_WARNING}${NC} Secret files not ignored by git:"
        for file in "${untracked_unignored[@]}"; do
            echo -e "     ${SYMBOL_WARNING} ${file#"$DOTFILES_DIR"/}"
        done
        echo -e "   ${YELLOW}${SYMBOL_WARNING}${NC} Add patterns to .gitignore to prevent future commits"
        echo ""
    fi
    
    if [[ ${#unignored_secrets[@]} -eq 0 ]] && [[ ${#untracked_unignored[@]} -eq 0 ]]; then
        echo -e "   ${GREEN}${SYMBOL_SUCCESS}${NC} All secret files properly ignored"
    fi
    echo ""
    # 4. Check SSH key security
    show_numbered_section "4" "Checking SSH Key Security"
    
    if [[ -d "$HOME/.ssh" ]]; then
        local exposed_keys=()
        
        for key in "$HOME/.ssh"/id_* "$HOME/.ssh"/*.pem; do
            [[ ! -f "$key" ]] && continue
            [[ "$key" == *.pub ]] && continue
            
            local perms
            perms=$(stat -c "%a" "$key" 2>/dev/null || stat -f "%OLp" "$key" 2>/dev/null || echo "000")
            perms=${perms: -3}
            
            if [[ "$perms" != "600" ]] && [[ "$perms" != "400" ]]; then
                exposed_keys+=("$(basename "$key") ($perms)")
                ((issues_found++))
            fi
        done
        
        if [[ ${#exposed_keys[@]} -gt 0 ]]; then
            echo -e "   ${YELLOW}${SYMBOL_WARNING}${NC} Insecure SSH key permissions:"
            for key in "${exposed_keys[@]}"; do
                echo -e "     ${SYMBOL_WARNING} $key"
            done
            echo -e "   ${BLUE}${SYMBOL_INFO}${NC} Fix with: chmod 600 ~/.ssh/KEYFILE (or 400)"
        else
            echo -e "   ${GREEN}${SYMBOL_SUCCESS}${NC} SSH keys have secure permissions"
        fi
    else
        echo -e "   ${BLUE}${SYMBOL_INFO}${NC} No SSH directory found"
    fi
    echo ""
    
    # Summary
    show_section_separator
    echo ""
    if [[ $issues_found -eq 0 ]]; then
        log_success "No security issues detected"
        show_command_summary "success" "SECURE" ""
    else
        log_warning "Security audit found $issues_found potential issue(s)"
        show_command_summary "info" "$issues_found ISSUES FOUND" ""
        echo ""
        show_tip "Review and fix security issues before committing"
    fi
    echo ""
    
    return $issues_found
}
# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
# Argument Parsing Helpers
# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

# Check if argument is a flag (starts with -)
is_flag() {
    [[ $1 == -* ]]
}

# Check if argument is a valid command
is_valid_command() {
    local cmd="$1"
    [[ "$cmd" =~ ^(install|health|update|status|diff|backup|backups|restore|clean|uninstall|enable|disable|packages|security)$ ]]
}

# Parse verbosity flag and return level increment
# Handles: -v (1), -vv (2), -vvv (3), --verbose (1)
# Examples:
#   -v           → 1
#   -vv          → 2
#   --verbose    → 1
#   -v -v        → 1 + 1 = 2 (accumulated)
#   --verbose --verbose → 1 + 1 = 2 (accumulated)
parse_verbosity() {
    local flag="$1"

    if [[ $flag =~ ^-v+$ ]]; then
        # Count v's: -v=1, -vv=2, -vvv=3
        local v_part="${flag#-}"
        echo "${#v_part}"
        return 0
    elif [[ $flag == "--verbose" ]]; then
        echo "1"
        return 0
    fi

    return 1
}

# Exit with error message
die() {
    log_error "$1"
    [[ -n "${2:-}" ]] && show_usage
    exit 1
}

# Parse command-line arguments
# Sets global variables: COMMAND, VERBOSITY
parse_arguments() {
    COMMAND=""
    VERBOSITY=0

    while [[ $# -gt 0 ]]; do
        case $1 in
            # Help
            -h|--help)
                show_usage
                exit 0
                ;;

            # Verbosity (-v, -vv, -vvv, --verbose)
            -v*|--verbose)
                local level
                if level=$(parse_verbosity "$1"); then
                    ((VERBOSITY += level))
                    shift
                else
                    die "Invalid verbosity flag: $1" show_usage
                fi
                ;;

            # Completion
            --completion)
                if [[ -z "${2:-}" ]]; then
                    die "Missing argument for --completion" show_usage
                fi
                handle_completion "$2"
                exit 0
                ;;

            # Deprecated validate command
            validate)
                log_warning "'validate' is deprecated, use 'health' instead"
                COMMAND="health"
                shift
                ;;

            # Valid commands
            install|health|update|status|diff|backup|backups|restore|clean|uninstall|enable|disable|packages|security)
                if [[ -n "$COMMAND" ]]; then
                    die "Multiple commands specified: '$COMMAND' and '$1'"
                fi
                COMMAND="$1"
                shift
                ;;
            # Unknown option (unknown flag)
            -*)
                die "Unknown option: $1" show_usage
                ;;
            # Unknown argument
            *)
                die "Unknown argument: $1" show_usage
        esac
    done

    # Default to help if no command
    if [[ -z "$COMMAND" ]]; then
        show_usage
        exit 0
    fi
}

# Handle shell completion requests
handle_completion() {
    local shell="$1"
    case "$shell" in
        bash)
            show_bash_completion
            ;;
        zsh)
            show_zsh_completion
            ;;
        fish)
            show_fish_completion
            ;;
        *)
            die "Unknown shell type: $shell. Use 'bash', 'zsh', or 'fish'"
            ;;
    esac
}

# Main script logic
main() {
    # Parse command-line arguments into global COMMAND and VERBOSITY
    parse_arguments "$@"

    # Execute command with verbosity level
    case $COMMAND in
        install)
            cmd_install "$VERBOSITY"
            ;;
        health)
            # Health only has 2 modes: table (0) or detailed (1+)
            if [[ $VERBOSITY -ge 1 ]]; then
                cmd_health true
            else
                cmd_health false
            fi
            ;;
        update)
            cmd_update "$VERBOSITY"
            ;;
        status)
            cmd_status
            ;;
        diff)
            cmd_diff
            ;;
        backup)
            cmd_backup
            ;;
        backups)
            cmd_backups
            ;;
        restore)
            # Pass backup ID argument if provided
            shift  # Remove command from args
            cmd_restore "$@"
            ;;
        clean)
            cmd_clean
            ;;
        uninstall)
            cmd_uninstall
            ;;
        enable)
            # Pass package argument
            shift  # Remove command from args
            cmd_enable "$@"
            ;;
        disable)
            # Pass package argument
            shift  # Remove command from args
            cmd_disable "$@"
            ;;
        packages)
            cmd_packages
            ;;
        security)
            cmd_security
            ;;
        *)
            die "Unknown command: $COMMAND"
            ;;
    esac
}

# Shell completion support
# This section provides completion functions that can be sourced from shell configs
# Usage: source <(dot --completion bash) or source <(dot --completion zsh)

show_bash_completion() {
    cat << 'EOF'
# Dotfiles management wrapper function
d() {
    local cmd="${1:-help}"
    if (($#)); then shift; fi

    case "$cmd" in
        h|health) "$HOME/.dotfiles/dot" health "$@" ;;
        s|status) "$HOME/.dotfiles/dot" status "$@" ;;
        u|update) "$HOME/.dotfiles/dot" update "$@" ;;
        d|diff)   "$HOME/.dotfiles/dot" diff "$@" ;;
        b|backup) "$HOME/.dotfiles/dot" backup "$@" ;;
        backups)  "$HOME/.dotfiles/dot" backups "$@" ;;
        r|restore) "$HOME/.dotfiles/dot" restore "$@" ;;
        c|clean)  "$HOME/.dotfiles/dot" clean "$@" ;;
        i|install) "$HOME/.dotfiles/dot" install "$@" ;;
        security) "$HOME/.dotfiles/dot" security "$@" ;;
        cd)       builtin cd "$HOME/.dotfiles" || return ;;
        *)        "$HOME/.dotfiles/dot" "$cmd" "$@" ;;
    esac
}

# Bash completion for dot script
_dot_completion() {
    local cur="${COMP_WORDS[COMP_CWORD]}"
    local prev="${COMP_WORDS[COMP_CWORD-1]}"

    # Complete commands
    if [[ ${COMP_CWORD} -eq 1 ]] || [[ "$prev" == -* ]]; then
        local commands="install status health update diff backup backups restore clean uninstall enable disable packages security"
        local flags="-h --help -v --verbose -vv"
        # Bash 3.2 compatible (no mapfile)
        COMPREPLY=()
        while IFS= read -r word; do
            COMPREPLY+=("$word")
        done < <(compgen -W "$commands $flags" -- "$cur")
    else
        # Complete flags for commands that support verbosity
        case "$prev" in
            install|update|health)
                local flags="-v --verbose -vv"
                COMPREPLY=()
                while IFS= read -r word; do
                    COMPREPLY+=("$word")
                done < <(compgen -W "$flags" -- "$cur")
                ;;
            enable|disable)
                local packages="system git zsh tmux gh gnuplot bash fish"
                COMPREPLY=()
                while IFS= read -r word; do
                    COMPREPLY+=("$word")
                done < <(compgen -W "$packages" -- "$cur")
                ;;
        esac
    fi
}
complete -F _dot_completion dot

# Bash completion for d function wrapper
_d_completion_bash() {
    local cur="${COMP_WORDS[COMP_CWORD]}"
    local prev="${COMP_WORDS[COMP_CWORD-1]}"

    # Complete commands
    if [[ ${COMP_CWORD} -eq 1 ]] || [[ "$prev" == -* ]]; then
        local commands="h health s status u update b backup c clean i install uninstall cd"
        local flags="-h --help -v --verbose -vv"
        # Bash 3.2 compatible (no mapfile)
        COMPREPLY=()
        while IFS= read -r word; do
            COMPREPLY+=("$word")
        done < <(compgen -W "$commands $flags" -- "$cur")
    else
        # Complete flags for commands that support verbosity
        case "$prev" in
            i|install|u|update|h|health)
                local flags="-v --verbose -vv"
                COMPREPLY=()
                while IFS= read -r word; do
                    COMPREPLY+=("$word")
                done < <(compgen -W "$flags" -- "$cur")
                ;;
        esac
    fi
}
complete -F _d_completion_bash d
EOF
}

show_zsh_completion() {
    cat << 'EOF'
# Dotfiles management wrapper function
d() {
    local cmd="${1:-help}"
    if (($#)); then shift; fi

    case "$cmd" in
        h|health) "$HOME/.dotfiles/dot" health "$@" ;;
        s|status) "$HOME/.dotfiles/dot" status "$@" ;;
        u|update) "$HOME/.dotfiles/dot" update "$@" ;;
        d|diff)   "$HOME/.dotfiles/dot" diff "$@" ;;
        b|backup) "$HOME/.dotfiles/dot" backup "$@" ;;
        backups)  "$HOME/.dotfiles/dot" backups "$@" ;;
        r|restore) "$HOME/.dotfiles/dot" restore "$@" ;;
        c|clean)  "$HOME/.dotfiles/dot" clean "$@" ;;
        i|install) "$HOME/.dotfiles/dot" install "$@" ;;
        security) "$HOME/.dotfiles/dot" security "$@" ;;
        cd)       builtin cd "$HOME/.dotfiles" || return ;;
        *)        "$HOME/.dotfiles/dot" "$cmd" "$@" ;;
    esac
}

# Zsh completion for dot script
_dot_completion() {
    local curcontext="$curcontext" state line
    typeset -A opt_args

    _arguments -C \
        '(-h --help)'{-h,--help}'[Show help message]' \
        '(-v --verbose)'{-v,--verbose}'[Verbose output (can be repeated)]' \
        '-vv[Very verbose output]' \
        '1: :->command' \
        '*::arg:->args'

    case $state in
        command)
            local -a commands
            commands=(
                'install:Install dotfiles using GNU Stow'
                'status:Show installation status and recent backups'
                'health:Run comprehensive diagnostics'
                'update:Update configurations and reinstall'
                'diff:Preview changes before applying'
                'backup:Create backup of existing files'
                'backups:List all available backups with details'
                'restore:Restore from backup (default: latest)'
                'clean:Clean up backup directories'
                'uninstall:Remove dotfiles symlinks'
                'enable:Enable a specific package'
                'disable:Disable a specific package'
                'packages:List all packages and their status'
                'security:Run security audit on dotfiles'
            )
            _describe 'dot command' commands
            ;;
        args)
            case $words[1] in
                install|update|health)
                    _arguments \
                        '(-v --verbose)'{-v,--verbose}'[Verbose output]' \
                        '-vv[Very verbose output]'
                    ;;
                enable|disable)
                    # Complete with package names
                    local -a packages
                    packages=(
                        'system:System-wide configuration'
                        'git:Git configuration and aliases'
                        'zsh:Zsh shell with Oh My Zsh'
                        'tmux:Tmux terminal multiplexer'
                        'gh:GitHub CLI configuration'
                        'gnuplot:Gnuplot configuration'
                        'bash:Bash shell configuration'
                    )
                    _describe 'package' packages
                    ;;
                restore)
                    # Complete with available backup IDs
                    local -a backups
                    backups=('latest:Most recent backup')
                    while IFS= read -r dir; do
                        local name
                        name=$(basename "$dir")
                        local timestamp="${name#dotfiles-backup-}"
                        backups+=("$timestamp:Backup $timestamp")
                    done < <(find "$HOME/.dotfiles/backups" -type d -name "dotfiles-backup-*" 2>/dev/null | sort -r)
                    _describe 'backup' backups
                    ;;
            esac
            ;;
    esac
}
compdef _dot_completion dot

# Zsh completion for d function wrapper
_d_completion() {
    local curcontext="$curcontext" state line
    typeset -A opt_args

    _arguments -C \
        '(-h --help)'{-h,--help}'[Show help message]' \
        '(-v --verbose)'{-v,--verbose}'[Verbose output (can be repeated)]' \
        '-vv[Very verbose output]' \
        '1: :->command' \
        '*::arg:->args'

    case $state in
        command)
            local -a commands
            commands=(
                'h:health - Comprehensive diagnostics'
                'health:Comprehensive diagnostics'
                's:status - Quick status check'
                'status:Quick status check'
                'u:update - Update and reinstall'
                'update:Update and reinstall'
                'd:diff - Preview changes'
                'diff:Preview changes'
                'b:backup - Create backup'
                'backup:Create backup'
                'backups:List all available backups'
                'r:restore - Restore from backup'
                'restore:Restore from backup'
                'c:clean - Clean up old backups'
                'clean:Clean up old backups'
                'i:install - Install dotfiles'
                'install:Install dotfiles'
                'uninstall:Remove dotfiles'
                'cd:Change to dotfiles directory'
            )
            _describe 'dotfiles command' commands
            ;;
        args)
            case $words[1] in
                i|install|u|update|h|health)
                    _arguments \
                        '(-v --verbose)'{-v,--verbose}'[Verbose output]' \
                        '-vv[Very verbose output]'
                    ;;
            esac
            ;;
    esac
}
compdef _d_completion d
EOF
}

show_fish_completion() {
    cat << 'EOF'
# Fish completion for dot command
complete -c dot -f
complete -c dot -s h -l help -d "Show help message"
complete -c dot -s v -l verbose -d "Verbose output (can be repeated)"
complete -c dot -o vv -d "Very verbose output"

# Commands
complete -c dot -n "__fish_use_subcommand" -a "install" -d "Install dotfiles using GNU Stow"
complete -c dot -n "__fish_use_subcommand" -a "status" -d "Show installation status and recent backups"
complete -c dot -n "__fish_use_subcommand" -a "health" -d "Run comprehensive diagnostics"
complete -c dot -n "__fish_use_subcommand" -a "update" -d "Update configurations and reinstall"
complete -c dot -n "__fish_use_subcommand" -a "backup" -d "Create backup of existing files"
complete -c dot -n "__fish_use_subcommand" -a "backups" -d "List all available backups with details"
complete -c dot -n "__fish_use_subcommand" -a "restore" -d "Restore from backup (default: latest)"
complete -c dot -n "__fish_use_subcommand" -a "clean" -d "Clean up backup directories"
complete -c dot -n "__fish_use_subcommand" -a "uninstall" -d "Remove dotfiles symlinks"
complete -c dot -n "__fish_use_subcommand" -a "enable" -d "Enable a specific package"
complete -c dot -n "__fish_use_subcommand" -a "disable" -d "Disable a specific package"
complete -c dot -n "__fish_use_subcommand" -a "packages" -d "List all packages and their status"

# Verbosity flags for install/update/health
complete -c dot -n "__fish_seen_subcommand_from install update health" -s v -l verbose -d "Verbose output"
complete -c dot -n "__fish_seen_subcommand_from install update health" -o vv -d "Very verbose output"

# Package completions for enable/disable
complete -c dot -n "__fish_seen_subcommand_from enable disable" -a "system" -d "System-wide configuration"
complete -c dot -n "__fish_seen_subcommand_from enable disable" -a "git" -d "Git configuration and aliases"
complete -c dot -n "__fish_seen_subcommand_from enable disable" -a "zsh" -d "Zsh shell with Oh My Zsh"
complete -c dot -n "__fish_seen_subcommand_from enable disable" -a "tmux" -d "Tmux terminal multiplexer"
complete -c dot -n "__fish_seen_subcommand_from enable disable" -a "gh" -d "GitHub CLI configuration"
complete -c dot -n "__fish_seen_subcommand_from enable disable" -a "gnuplot" -d "Gnuplot configuration"
complete -c dot -n "__fish_seen_subcommand_from enable disable" -a "bash" -d "Bash shell configuration"
complete -c dot -n "__fish_seen_subcommand_from enable disable" -a "fish" -d "Fish shell configuration"

# Fish completion for d function wrapper
complete -c d -f
complete -c d -s h -l help -d "Show help message"
complete -c d -s v -l verbose -d "Verbose output (can be repeated)"
complete -c d -o vv -d "Very verbose output"

# Commands with aliases
complete -c d -n "__fish_use_subcommand" -a "h" -d "health - Comprehensive diagnostics"
complete -c d -n "__fish_use_subcommand" -a "health" -d "Comprehensive diagnostics"
complete -c d -n "__fish_use_subcommand" -a "s" -d "status - Quick status check"
complete -c d -n "__fish_use_subcommand" -a "status" -d "Quick status check"
complete -c d -n "__fish_use_subcommand" -a "u" -d "update - Update and reinstall"
complete -c d -n "__fish_use_subcommand" -a "update" -d "Update and reinstall"
complete -c d -n "__fish_use_subcommand" -a "b" -d "backup - Create backup"
complete -c d -n "__fish_use_subcommand" -a "backup" -d "Create backup"
complete -c d -n "__fish_use_subcommand" -a "backups" -d "List all available backups"
complete -c d -n "__fish_use_subcommand" -a "r" -d "restore - Restore from backup"
complete -c d -n "__fish_use_subcommand" -a "restore" -d "Restore from backup"
complete -c d -n "__fish_use_subcommand" -a "c" -d "clean - Clean up old backups"
complete -c d -n "__fish_use_subcommand" -a "clean" -d "Clean up old backups"
complete -c d -n "__fish_use_subcommand" -a "i" -d "install - Install dotfiles"
complete -c d -n "__fish_use_subcommand" -a "install" -d "Install dotfiles"
complete -c d -n "__fish_use_subcommand" -a "uninstall" -d "Remove dotfiles"
complete -c d -n "__fish_use_subcommand" -a "cd" -d "Change to dotfiles directory"

# Verbosity flags for d function
complete -c d -n "__fish_seen_subcommand_from i install u update h health" -s v -l verbose -d "Verbose output"
complete -c d -n "__fish_seen_subcommand_from i install u update h health" -o vv -d "Very verbose output"
EOF
}

# Run main function with all arguments
# Skip if being sourced for testing
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi
