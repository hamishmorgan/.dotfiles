---
description: "CI/CD workflow structure and performance optimization patterns"
globs: [".github/workflows/**"]
---

# CI/CD

## Workflow Structure

GitHub Actions workflow (`.github/workflows/validate.yml`) uses matrix strategy for efficient testing:

**Job Overview:**

- **lint**: Code quality (shellcheck + markdownlint) - prerequisite for all other jobs
- **smoke-test**: Fast structural validation
- **bats-tests**: All BATS test suites with OS matrix
  - `[ubuntu-latest, macos-latest]` - validates test framework cross-platform
  - Runs unit, integration, regression, and contract tests
- **validate-platform**: Full installation with Bash version matrix
  - Ubuntu + Bash 5.x (modern Linux)
  - Ubuntu + Bash 3.2 (macOS compatibility)
  - macOS + Bash 3.2 (actual macOS)
- **test-summary**: Aggregates results and provides clear pass/fail summary

**Matrix Benefits:**

- Consolidates 4 separate BATS jobs into 1 (saves 6-8 min per run)
- Validates test framework on both Ubuntu and macOS
- Catches platform-specific issues in tests themselves
- DRY approach reduces duplication

## CI Performance Optimization

Key learnings from CI optimization work (Issue #42, PR #58, Issue #22):

### Caching Strategies

- **Homebrew**: Don't cache. Bottles install faster than cache save/restore overhead.
- **apt packages**: Use user-writable cache (`~/.apt-cache`) to avoid permission issues:

  ```yaml
  - name: Configure apt caching
    run: |
      mkdir -p ~/.apt-cache/archives/partial
      sudo mkdir -p /etc/apt/apt.conf.d
      echo "Dir::Cache::Archives \"$HOME/.apt-cache/archives\";" | sudo tee /etc/apt/apt.conf.d/99user-cache
  ```

- **npm tools**: Use `npx` with version pinning instead of global install:

  ```yaml
  npx --yes markdownlint-cli@0.42.0 "**/*.md"
  ```

- **Stable cache keys**: Use package names, not file hashes to reduce cache churn.
- **Clean up lock files**: Remove root-owned locks before cache save:

  ```yaml
  - name: Clean up apt cache lock files
    if: always()
    run: rm -rf ~/.apt-cache/archives/lock ~/.apt-cache/archives/partial
  ```

### Performance Insights

- `apt-get update` is the main bottleneck (~8-9s per job)
- Separate into dedicated step for timing visibility
- Skip installing pre-installed packages (shellcheck on GitHub runners)
- Parallel job execution reduces wall-clock time
- Verbose test output (`-vv`) aids debugging without performance cost

### Measured Results

Phase 1 optimizations (Issue #42, PR #58) reduced CI time from 8-12 minutes to ~1 minute (92% improvement):

- Linting: 90s → 15s (83% faster)
- Smoke: 30s → 6s (80% faster)
- Ubuntu: 120s → 28s (77% faster)
- Bash 3.2: 120s → 32s (73% faster, cache miss)
- macOS: 180s → 26s (86% faster)

Phase 2 optimizations (Issue #22) consolidated BATS tests:

- **Before**: 4 separate BATS jobs × 2 min setup = 8 min overhead
- **After**: 1 BATS job with OS matrix = 2 min overhead
- **Savings**: 6 min per CI run (~25% additional improvement)
- **Bonus**: BATS tests now validate on macOS (was Ubuntu-only)
