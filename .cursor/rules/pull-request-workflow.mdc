---
description: "Pull request workflow and review process"
alwaysApply: false
---

# Pull Request Workflow

For all code changes:

1. **Create Pull Request**: Use `gh pr create` with title and body
2. **Check Rebase Status**: Always check if PR needs rebasing on main before review

   ```bash
   gh pr view <PR> --json mergeStateStatus --jq '.mergeStateStatus'
   # If "BEHIND": rebase immediately
   git fetch origin main
   git rebase origin/main
   git push --force-with-lease
   ```

3. **Self-Review**: Critically review your own changes before requesting external review
   - Read the full diff: `gh pr diff <PR_NUMBER>`
   - Check for anti-patterns documented in AGENTS.md
   - Verify tests follow testing principles (no acceptable failure patterns)
   - Ensure code follows style guidelines
   - Look for inconsistencies or missed edge cases
4. **Request Copilot Review**: Wait for automatic Copilot review on PR
5. **Wait for CI**: Monitor CI status until passing
6. **Wait for Copilot Review**: Review Copilot feedback
7. **Address Issues**: Fix any problems identified (including from self-review)
8. **Commit and Push Incrementally**: After making changes, commit and push them immediately
   - Make logical, focused commits (one feature/fix per commit)
   - Use conventional commit format: `git commit --author="Cursor <cursor@noreply.local>" -m "Type: description"`
   - Push to PR branch: `git push origin <branch-name>`
   - **Do not accumulate multiple changes** - commit and push after each logical change
   - This allows incremental review and easier debugging if issues arise
9. **Check Rebase Status Again**: Before pushing fixes, check if main has advanced
   - If PR is BEHIND, rebase again before pushing fixes
10. **Self-Review Your Fixes**: Before pushing changes, critically review them
    - Read the diff of your fixes: `git diff`
    - Verify the fix completely addresses the issue
    - Check you haven't introduced new problems
    - Ensure the fix follows all code standards
11. **Test Your Fixes**: Run full validation locally before pushing
    - Run: `./dev/check` (lint + test + ci - ~3-4 minutes)
    - Much faster than waiting for CI feedback
    - Fix any failures before pushing
12. **Check Rebase Before Each Push**: Always check merge status before pushing

    ```bash
    gh pr view <PR> --json mergeStateStatus --jq '.mergeStateStatus'
    # If BEHIND: git fetch && git rebase origin/main && git push --force-with-lease
    ```

13. **Push and Wait for Re-Review**: Push fixes and wait for CI and Copilot to re-review
14. **Repeat Steps 7-13**: Continue until both CI and Copilot approve with no new issues
15. **Update AGENTS.md**: Document new patterns, optimizations, or lessons learned
16. **Wait for User Approval**: Do NOT merge until user explicitly instructs you to do so
17. **Merge**: Only merge after user approval, CI passing, and Copilot satisfied
18. **Post-Merge Cleanup**:
    - Update local main: `git checkout main && git pull`
    - Delete feature branch: `git branch -d <branch-name>`
    - Delete remote branch (if not auto-deleted): `git push origin --delete <branch-name>`

This ensures code quality through automated testing and AI review.

## Checking for Unaddressed Comments

**CRITICAL:** When asked to check PR comments, you MUST check BOTH general comments AND inline review comments.

**Incomplete check (DON'T DO THIS):**

```bash
# ❌ WRONG: Only shows PR overview, misses inline review comments
gh pr view <PR_NUMBER>
gh pr checks <PR_NUMBER>
```

**Complete check (REQUIRED):**

```bash
# ✅ CORRECT: Check ALL comment sources

# 1. General PR comments and overview
gh pr view <PR_NUMBER> --comments

# 2. Inline code review comments (CRITICAL - often missed)
gh api repos/<owner>/<repo>/pulls/<PR_NUMBER>/comments --jq '.[] | {path, line, body, created_at}'

# 3. Review decision status
gh pr view <PR_NUMBER> --json reviewDecision

# 4. CI status
gh pr checks <PR_NUMBER>
```

**Why this matters:**

- `gh pr view` shows **general comments only** (conversation tab)
- Inline review comments (code-specific feedback) require `gh api .../comments`
- Copilot leaves most feedback as **inline comments on specific lines**
- Missing inline comments means missing critical feedback

**Example of what you'll miss:**

```bash
# These are inline comments (not shown by gh pr view):
# - "Hardcoded path '/Users/hamish/' should use $HOME"
# - "Regex pattern should be quoted"
# - "Variable name typo on line 123"
```

**Checklist when user asks to check comments:**

- [ ] Run `gh pr view <PR> --comments` (general comments)
- [ ] Run `gh api repos/.../pulls/<PR>/comments` (inline review comments)
- [ ] Run `gh pr view <PR> --json reviewDecision` (approval status)
- [ ] Check each comment is addressed in code
- [ ] Verify no unresolved threads remain

**Note:** The PR template includes an AGENTS.md update checklist to remind about documentation.

For GitHub integration patterns (MCP tools vs `gh` CLI, CI monitoring, etc.), see `.cursor/rules/github-integration.mdc`.
