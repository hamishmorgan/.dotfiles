#!/usr/bin/env bash
# Run all BATS test suites
# Note: Do not use 'set -e' - we need to run all suites even if one fails

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
TESTS_DIR="$(cd "$SCRIPT_DIR/../tests" && pwd)"

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
NC='\033[0m'

echo -e "${BLUE}Running BATS test suite...${NC}"
echo ""

# Check if BATS is available
if ! command -v bats >/dev/null 2>&1; then
    echo -e "${RED}Error: BATS not installed${NC}"
    echo ""
    echo "Install BATS:"
    echo "  macOS:  brew install bats-core"
    echo "  Ubuntu: sudo apt-get install bats"
    echo ""
    exit 1
fi

# Check for BATS flags support
BATS_FLAGS=""
if bats --version | grep -q "bats-core"; then
    # bats-core supports --tap and --pretty
    BATS_FLAGS="--tap"
fi

# Run each test suite
test_suites=(
    "regression:Regression Tests"
    "unit:Unit Tests"
    "integration:Integration Tests"
    "contract:Contract Tests"
)

total_pass=0
total_fail=0
failed_suites=()

for suite in "${test_suites[@]}"; do
    IFS=':' read -r dir name <<< "$suite"

    if [[ ! -d "$TESTS_DIR/$dir" ]]; then
        echo -e "${BLUE}Skipping $name (directory not found)${NC}"
        continue
    fi

    echo -e "${BLUE}Running $name...${NC}"

    # Capture output and exit code
    output=""
    exit_code=0
    if [[ -n "$BATS_FLAGS" ]]; then
        output=$(bats $BATS_FLAGS "$TESTS_DIR/$dir/" 2>&1)
        exit_code=$?
    else
        output=$(bats "$TESTS_DIR/$dir/" 2>&1)
        exit_code=$?
    fi

    if [[ $exit_code -eq 0 ]]; then
        echo -e "${GREEN}✓ $name passed${NC}"
        ((total_pass++))
    else
        echo -e "${RED}✗ $name failed${NC}"
        ((total_fail++))
        failed_suites+=("$name")

        # Show failed test details
        echo ""
        echo -e "${YELLOW}Failed test details:${NC}"
        echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

        # Extract failed tests from output
        # Look for "not ok" lines in TAP format or test failure patterns
        if echo "$output" | grep -q "not ok"; then
            # TAP format - show failed tests with context
            echo "$output" | grep -E "(not ok|#)" | while IFS= read -r line; do
                if [[ "$line" =~ ^not\ ok ]]; then
                    echo -e "${RED}$line${NC}"
                elif [[ "$line" =~ ^# ]]; then
                    echo -e "${YELLOW}$line${NC}"
                fi
            done
        else
            # Fallback: show last 40 lines of output which usually contain errors
            echo "$output" | tail -40 | while IFS= read -r line; do
                if [[ "$line" =~ (error|Error|ERROR|fail|Fail|FAIL|✗|not ok|warning|Warning|WARNING) ]]; then
                    echo -e "${RED}$line${NC}"
                else
                    echo "$line"
                fi
            done
        fi

        echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
        echo ""
    fi

    echo ""
done

# Summary
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
echo -e "${BLUE}Test Summary:${NC}"
echo -e "  ${GREEN}Passed: $total_pass${NC}"
if [[ $total_fail -gt 0 ]]; then
    echo -e "  ${RED}Failed: $total_fail${NC}"
    if [[ ${#failed_suites[@]} -gt 0 ]]; then
        echo ""
        echo -e "${RED}Failed suites:${NC}"
        for failed_suite in "${failed_suites[@]}"; do
            echo -e "  ${RED}✗${NC} $failed_suite"
        done
    fi
    exit 1
else
    echo -e "  ${GREEN}All tests passed!${NC}"
    exit 0
fi
