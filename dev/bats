#!/usr/bin/env bash
# Run all BATS test suites
# Note: Do not use 'set -e' - we need to run all suites even if one fails

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
TESTS_DIR="$(cd "$SCRIPT_DIR/../tests" && pwd)"

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
NC='\033[0m'

echo -e "${BLUE}Running BATS test suite...${NC}"
echo ""

# Check if BATS is available
if ! command -v bats >/dev/null 2>&1; then
    echo -e "${RED}Error: BATS not installed${NC}"
    echo ""
    echo "Install BATS:"
    echo "  macOS:  brew install bats-core"
    echo "  Ubuntu: sudo apt-get install bats"
    echo ""
    exit 1
fi

# Run each test suite
test_suites=(
    "regression:Regression Tests"
    "unit:Unit Tests"
    "integration:Integration Tests"
    "contract:Contract Tests"
)

total_pass=0
total_fail=0
failed_suites=()

for suite in "${test_suites[@]}"; do
    IFS=':' read -r dir name <<< "$suite"

    if [[ ! -d "$TESTS_DIR/$dir" ]]; then
        echo -e "${BLUE}Skipping $name (directory not found)${NC}"
        continue
    fi

    echo -e "${BLUE}Running $name...${NC}"

    # Capture output and exit code
    # Use TAP formatter for better structured output
    output=""
    exit_code=0
    output=$(bats --formatter tap "$TESTS_DIR/$dir/" 2>&1)
    exit_code=$?

    if [[ $exit_code -eq 0 ]]; then
        echo -e "${GREEN}✓ $name passed${NC}"
        ((total_pass++))
    else
        echo -e "${RED}✗ $name failed${NC}"
        ((total_fail++))
        failed_suites+=("$name")

        # Show failed test details - display ALL output so we can see errors
        echo ""
        echo -e "${YELLOW}Failed test output:${NC}"
        echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

        # Parse test count to identify missing tests
        if echo "$output" | grep -q "bats warning: Executed"; then
            executed=$(echo "$output" | grep "bats warning: Executed" | sed -E 's/.*Executed ([0-9]+) instead of expected ([0-9]+).*/\1 \2/')

            # Validate that sed extraction succeeded (should contain two space-separated numbers)
            if [[ -n "$executed" ]] && echo "$executed" | grep -qE '^[0-9]+ [0-9]+$'; then
                expected_count=$(echo "$executed" | cut -d' ' -f2)
                actual_count=$(echo "$executed" | cut -d' ' -f1)

                if [[ "$actual_count" -lt "$expected_count" ]]; then
                    echo -e "${YELLOW}⚠ Missing tests: Expected $expected_count, executed $actual_count${NC}"
                    echo ""

                    # Extract test numbers that were executed
                    executed_tests=$(echo "$output" | grep "^ok " | sed -E 's/^ok ([0-9]+) .*/\1/' | sort -n)

                    # Find missing test numbers
                    missing_tests=()
                    for i in $(seq 1 "$expected_count"); do
                        if ! echo "$executed_tests" | grep -q "^$i$"; then
                            missing_tests+=("$i")
                        fi
                    done

                    if [[ ${#missing_tests[@]} -gt 0 ]]; then
                        echo -e "${RED}Missing test numbers: ${missing_tests[*]}${NC}"
                        echo -e "${YELLOW}(These tests were likely skipped or failed silently)${NC}"
                        echo ""
                    fi
                fi
            fi
        fi

        # Show the full output, highlighting error patterns
        echo "$output" | while IFS= read -r line; do
            if [[ "$line" =~ ^not\ ok ]]; then
                echo -e "${RED}$line${NC}"
            elif [[ "$line" =~ ^ok ]]; then
                # Don't colorize passing tests to reduce noise
                echo "$line"
            elif [[ "$line" =~ ^# ]]; then
                echo -e "${YELLOW}$line${NC}"
            elif [[ "$line" =~ (error|Error|ERROR|fail|Fail|FAIL|Assertion|expected|got|status) ]]; then
                echo -e "${RED}$line${NC}"
            elif [[ "$line" =~ (warning|Warning|WARNING|bats warning) ]]; then
                echo -e "${YELLOW}$line${NC}"
            else
                echo "$line"
            fi
        done

        echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
        echo ""
    fi

    echo ""
done

# Summary
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
echo -e "${BLUE}Test Summary:${NC}"
echo -e "  ${GREEN}Passed: $total_pass${NC}"
if [[ $total_fail -gt 0 ]]; then
    echo -e "  ${RED}Failed: $total_fail${NC}"
    if [[ ${#failed_suites[@]} -gt 0 ]]; then
        echo ""
        echo -e "${RED}Failed suites:${NC}"
        for failed_suite in "${failed_suites[@]}"; do
            echo -e "  ${RED}✗${NC} $failed_suite"
        done
    fi
    exit 1
else
    echo -e "  ${GREEN}All tests passed!${NC}"
    exit 0
fi
