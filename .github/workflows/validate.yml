name: CI (Proposed Matrix Strategy)

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  lint:
    name: Code Quality (Shellcheck & Markdownlint)
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Configure apt to skip documentation
      run: |
        sudo mkdir -p /etc/dpkg/dpkg.cfg.d
        echo 'path-exclude=/usr/share/doc/*' | sudo tee /etc/dpkg/dpkg.cfg.d/01_nodoc
        echo 'path-exclude=/usr/share/man/*' | sudo tee -a /etc/dpkg/dpkg.cfg.d/01_nodoc

    - name: Install shellcheck
      run: |
        if ! command -v shellcheck &> /dev/null; then
          sudo apt-get update -qq
          sudo apt-get install -y -qq shellcheck
        fi

    - name: Run linting
      run: |
        npx --yes markdownlint-cli@0.42.0 "**/*.md" --ignore node_modules
        shellcheck dot

  smoke-test:
    name: Smoke Tests
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Run smoke tests
      run: ./tests/smoke-test.sh

  # CONSOLIDATED BATS TESTS WITH OS MATRIX
  bats-tests:
    name: BATS Tests (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    needs: lint
    strategy:
      fail-fast: false  # Run both even if one fails
      matrix:
        os: [ubuntu-latest, macos-latest]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      # Ubuntu-specific setup
      - name: Install BATS (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y bats bats-assert bats-support bats-file stow git
      
      # macOS-specific setup
      - name: Install BATS (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew install bats-core bats-assert bats-support bats-file stow git
      
      - name: Verify BATS installation
        run: |
          bats --version
          echo "BATS helper libraries:"
          ls -la /usr/lib/bats/ 2>/dev/null || ls -la /usr/local/lib/bats* 2>/dev/null || echo "Helper libs location varies by platform"
      
      - name: Run all BATS test suites
        run: ./tests/run-bats.sh
      
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: bats-test-results-${{ matrix.os }}
          path: tests/

  # PLATFORM VALIDATION WITH OS MATRIX
  validate-platform:
    name: Full Validation (${{ matrix.name }})
    runs-on: ${{ matrix.os }}
    needs: lint
    strategy:
      fail-fast: false
      matrix:
        include:
          # Ubuntu with latest bash (5.x)
          - name: Ubuntu Latest (Bash 5.x)
            os: ubuntu-latest
            bash-version: system
            setup-bash: false
          
          # Ubuntu with Bash 3.2 (macOS compatibility)
          - name: Ubuntu Latest (Bash 3.2)
            os: ubuntu-latest
            bash-version: "3.2"
            setup-bash: true
          
          # macOS with system bash (3.2)
          - name: macOS Latest (Bash 3.2)
            os: macos-latest
            bash-version: "3.2"
            setup-bash: false
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: true
      
      # Cache Bash 3.2 build (Ubuntu only)
      - name: Cache Bash 3.2
        if: matrix.setup-bash
        uses: actions/cache@v4
        id: cache-bash32
        with:
          path: /tmp/bash-3.2.57-install
          key: bash-3.2.57-${{ runner.os }}-${{ runner.arch }}
      
      # Ubuntu apt cache
      - name: Cache apt packages
        if: matrix.os == 'ubuntu-latest'
        uses: actions/cache@v4
        with:
          path: ~/.apt-cache
          key: ${{ runner.os }}-apt-${{ matrix.bash-version }}-stow-git-tmux-zsh
          restore-keys: |
            ${{ runner.os }}-apt-
      
      # Ubuntu setup
      - name: Configure apt caching (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          mkdir -p ~/.apt-cache/archives/partial
          sudo mkdir -p /etc/apt/apt.conf.d
          echo "Dir::Cache::Archives \"$HOME/.apt-cache/archives\";" | sudo tee /etc/apt/apt.conf.d/99user-cache
          sudo mkdir -p /etc/dpkg/dpkg.cfg.d
          echo 'path-exclude=/usr/share/doc/*' | sudo tee /etc/dpkg/dpkg.cfg.d/01_nodoc
          echo 'path-exclude=/usr/share/man/*' | sudo tee -a /etc/dpkg/dpkg.cfg.d/01_nodoc
      
      - name: Update apt (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt-get update -qq
      
      # Build Bash 3.2 if needed (Ubuntu)
      - name: Build Bash 3.2
        if: matrix.setup-bash && steps.cache-bash32.outputs.cache-hit != 'true'
        run: |
          sudo apt-get install -y -qq build-essential
          cd /tmp
          curl -LO https://ftp.gnu.org/gnu/bash/bash-3.2.57.tar.gz
          echo "3fa9daf85ebf35068f090ce51283ddeeb3c75eb5bc70b1a4a7cb05868bfe06a4  bash-3.2.57.tar.gz" | sha256sum -c -
          tar xzf bash-3.2.57.tar.gz
          cd bash-3.2.57
          ./configure --prefix=/tmp/bash-3.2.57-install
          make -j4
          make install
      
      - name: Install Bash 3.2
        if: matrix.setup-bash
        run: sudo cp -r /tmp/bash-3.2.57-install/* /usr/local/
      
      # Install dependencies (platform-specific)
      - name: Install dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt-get install -y -qq stow git tmux zsh
      
      - name: Install dependencies (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew install stow git tmux zsh ncurses
          brew link --overwrite --force ncurses || true
      
      # Verify environment
      - name: Verify bash version
        run: |
          if [[ "${{ matrix.setup-bash }}" == "true" ]]; then
            /usr/local/bin/bash --version
            echo "Using: /usr/local/bin/bash"
          else
            bash --version
            echo "Using: $(which bash)"
          fi
      
      # Run tests
      - name: Make scripts executable
        run: chmod +x dot tests/lib/*.sh
      
      - name: Create test secrets
        run: ./tests/lib/create-secrets.sh
      
      - name: Run installation
        shell: ${{ matrix.setup-bash && '/usr/local/bin/bash {0}' || 'bash' }}
        run: |
          cd ${{ github.workspace }}
          ./tests/lib/run-installation.sh
      
      - name: Verify health
        shell: ${{ matrix.setup-bash && '/usr/local/bin/bash {0}' || 'bash' }}
        run: |
          cd ${{ github.workspace }}
          ./tests/lib/verify-health.sh true
      
      - name: Clean up (Ubuntu)
        if: always() && matrix.os == 'ubuntu-latest'
        run: rm -rf ~/.apt-cache/archives/lock ~/.apt-cache/archives/partial

  # SUMMARY JOB
  test-summary:
    name: Test Results Summary
    if: always()
    needs: [lint, smoke-test, bats-tests, validate-platform]
    runs-on: ubuntu-latest
    steps:
      - name: Check results
        run: |
          echo "## Test Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Lint | ${{ needs.lint.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Smoke Tests | ${{ needs.smoke-test.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| BATS Tests | ${{ needs.bats-tests.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Platform Validation | ${{ needs.validate-platform.result }} |" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.lint.result }}" == "success" ]] && \
             [[ "${{ needs.smoke-test.result }}" == "success" ]] && \
             [[ "${{ needs.bats-tests.result }}" == "success" ]] && \
             [[ "${{ needs.validate-platform.result }}" == "success" ]]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "✅ **All tests passed!**" >> $GITHUB_STEP_SUMMARY
            exit 0
          else
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "❌ **Some tests failed**" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

