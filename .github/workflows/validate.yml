name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  lint:
    name: Code Quality (Shellcheck & Markdownlint)
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      # No submodules needed - linting only checks dot script and markdown files

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Configure apt to skip documentation
      run: |
        sudo mkdir -p /etc/dpkg/dpkg.cfg.d
        echo 'path-exclude=/usr/share/doc/*' | sudo tee /etc/dpkg/dpkg.cfg.d/01_nodoc
        echo 'path-exclude=/usr/share/man/*' | sudo tee -a /etc/dpkg/dpkg.cfg.d/01_nodoc

    - name: Install shellcheck
      run: |
        # shellcheck is pre-installed on GitHub runners, but ensure it's available
        if ! command -v shellcheck &> /dev/null; then
          sudo apt-get update -qq
          sudo apt-get install -y -qq shellcheck
        fi

    - name: Run linting
      run: |
        # Use npx to avoid global install and leverage built-in npm caching
        npx --yes markdownlint-cli@0.42.0 "**/*.md" --ignore node_modules
        shellcheck dot

  smoke-test:
    name: Smoke Tests
    runs-on: ubuntu-latest
    # Run in parallel with other jobs - smoke tests are independent

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      # No submodules needed - smoke tests only check file structure

    - name: Run smoke tests
      run: ./tests/smoke-test.sh

  validate-bash32:
    name: Ubuntu Latest (Bash 3.2)
    runs-on: ubuntu-latest
    needs: lint

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        submodules: true

    - name: Cache Bash 3.2
      uses: actions/cache@v4
      id: cache-bash32
      with:
        path: /tmp/bash-3.2.57-install
        key: bash-3.2.57-${{ runner.os }}-${{ runner.arch }}

    - name: Cache apt packages
      uses: actions/cache@v4
      continue-on-error: true  # Ignore permission errors on lock files during save
      with:
        # Only cache downloaded packages, not package lists (avoids stale indices and permission issues)
        path: /var/cache/apt/archives
        key: ${{ runner.os }}-apt-bash32-build-essential-stow-git-tmux-zsh
        restore-keys: |
          ${{ runner.os }}-apt-bash32-
          ${{ runner.os }}-apt-

    - name: Configure apt to skip documentation
      run: |
        sudo mkdir -p /etc/dpkg/dpkg.cfg.d
        echo 'path-exclude=/usr/share/doc/*' | sudo tee /etc/dpkg/dpkg.cfg.d/01_nodoc
        echo 'path-exclude=/usr/share/man/*' | sudo tee -a /etc/dpkg/dpkg.cfg.d/01_nodoc

    - name: Update apt package lists
      if: steps.cache-bash32.outputs.cache-hit != 'true'
      run: sudo apt-get update -qq

    - name: Build Bash 3.2 and install dependencies
      if: steps.cache-bash32.outputs.cache-hit != 'true'
      run: |
        sudo apt-get install -y -qq build-essential stow git tmux zsh

        # Download and build bash 3.2.57
        cd /tmp
        curl -LO https://ftp.gnu.org/gnu/bash/bash-3.2.57.tar.gz

        # Verify SHA256 checksum for security
        echo "3fa9daf85ebf35068f090ce51283ddeeb3c75eb5bc70b1a4a7cb05868bfe06a4  bash-3.2.57.tar.gz" | sha256sum -c -

        tar xzf bash-3.2.57.tar.gz
        cd bash-3.2.57
        ./configure --prefix=/tmp/bash-3.2.57-install
        make -j4  # Use up to 4 cores for predictable resource usage
        make install

    - name: Update apt package lists (cache hit)
      if: steps.cache-bash32.outputs.cache-hit == 'true'
      run: sudo apt-get update -qq

    - name: Install dependencies (cache hit)
      if: steps.cache-bash32.outputs.cache-hit == 'true'
      run: sudo apt-get install -y -qq stow git tmux zsh

    - name: Install Bash 3.2
      run: |
        # Install bash from cache or fresh build
        sudo cp -r /tmp/bash-3.2.57-install/* /usr/local/

        # Verify version
        /usr/local/bin/bash --version

    - name: Make scripts executable
      run: chmod +x dot tests/lib/*.sh

    - name: Create test secrets
      shell: /usr/local/bin/bash {0}
      run: |
        cd ${{ github.workspace }}
        ./tests/lib/create-secrets.sh

    - name: Run installation with Bash 3.2
      shell: /usr/local/bin/bash {0}
      run: |
        cd ${{ github.workspace }}
        ./tests/lib/run-installation.sh

    - name: Verify health with Bash 3.2
      shell: /usr/local/bin/bash {0}
      run: |
        cd ${{ github.workspace }}
        ./tests/lib/verify-health.sh true

    - name: Verify bash version used
      shell: /usr/local/bin/bash {0}
      run: |
        echo "Bash version: $BASH_VERSION"
        [[ "$BASH_VERSION" =~ ^3\.2 ]] || (echo "Error: Not running Bash 3.2" && exit 1)

  validate-ubuntu:
    name: Ubuntu Latest (System Bash)
    runs-on: ubuntu-latest
    needs: lint

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        submodules: true

    - name: Verify bash version
      run: |
        echo "Bash version: $BASH_VERSION"
        echo "OS: $(lsb_release -d | cut -f2)"
        # Ubuntu latest should have Bash 5.x+
        [[ "${BASH_VERSINFO[0]}" -ge 5 ]] || (echo "Error: Expected Bash 5.x+, got $BASH_VERSION" && exit 1)

    - name: Cache apt packages
      uses: actions/cache@v4
      continue-on-error: true  # Ignore permission errors on lock files during save
      with:
        # Only cache downloaded packages, not package lists (avoids stale indices and permission issues)
        path: /var/cache/apt/archives
        key: ${{ runner.os }}-apt-ubuntu-stow-git-tmux-zsh
        restore-keys: |
          ${{ runner.os }}-apt-ubuntu-
          ${{ runner.os }}-apt-

    - name: Configure apt to skip documentation
      run: |
        sudo mkdir -p /etc/dpkg/dpkg.cfg.d
        echo 'path-exclude=/usr/share/doc/*' | sudo tee /etc/dpkg/dpkg.cfg.d/01_nodoc
        echo 'path-exclude=/usr/share/man/*' | sudo tee -a /etc/dpkg/dpkg.cfg.d/01_nodoc

    - name: Update apt package lists
      run: sudo apt-get update -qq

    - name: Install dependencies
      run: sudo apt-get install -y -qq stow git tmux zsh

    - name: Make scripts executable
      run: chmod +x dot tests/lib/*.sh

    - name: Create test secrets
      run: |
        cd ${{ github.workspace }}
        ./tests/lib/create-secrets.sh

    - name: Run installation
      run: |
        cd ${{ github.workspace }}
        ./tests/lib/run-installation.sh

    - name: Verify health
      run: |
        cd ${{ github.workspace }}
        ./tests/lib/verify-health.sh true

  validate-macos:
    name: macOS Latest (System Bash)
    runs-on: macos-latest
    needs: lint

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        submodules: true

    - name: Verify bash version
      run: |
        echo "Bash version: $BASH_VERSION"
        echo "OS: $(sw_vers -productName) $(sw_vers -productVersion)"
        # macOS system bash should be 3.2.x
        [[ "$BASH_VERSION" =~ ^3\.2 ]] || (echo "Error: Expected Bash 3.2.x, got $BASH_VERSION" && exit 1)

    - name: Install dependencies
      # Note: No caching - Homebrew bottles install faster than cache restore
      run: |
        brew install stow git tmux zsh ncurses
        # ncurses is keg-only and requires explicit linking
        brew link --overwrite --force ncurses || true

    - name: Make scripts executable
      run: chmod +x dot tests/lib/*.sh

    - name: Create test secrets
      run: |
        cd ${{ github.workspace }}
        ./tests/lib/create-secrets.sh

    - name: Run installation
      env:
        SKIP_DEPENDENCY_CHECK: "true"
      run: |
        cd ${{ github.workspace }}
        # Run with verbose output for easier debugging
        ./dot install -vv

    - name: Verify health
      run: |
        cd ${{ github.workspace }}
        ./tests/lib/verify-health.sh true
